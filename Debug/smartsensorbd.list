
smartsensorbd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e34  08003e34  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003e34  08003e34  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e34  08003e34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e38  08003e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  20000010  08003e4c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  08003e4c  00020884  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c388  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002357  00000000  00000000  0002c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  0002f000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011275  00000000  00000000  0002f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e31e  00000000  00000000  00040a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060d3c  00000000  00000000  0004ed63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000afa9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c8c  00000000  00000000  000afaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003be4 	.word	0x08003be4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003be4 	.word	0x08003be4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2003      	movs	r0, #3
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f003 fad9 	bl	80037ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000250:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <HAL_InitTick+0x5c>)
 8000252:	681c      	ldr	r4, [r3, #0]
 8000254:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <HAL_InitTick+0x60>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	0019      	movs	r1, r3
 800025a:	23fa      	movs	r3, #250	; 0xfa
 800025c:	0098      	lsls	r0, r3, #2
 800025e:	f7ff ff53 	bl	8000108 <__udivsi3>
 8000262:	0003      	movs	r3, r0
 8000264:	0019      	movs	r1, r3
 8000266:	0020      	movs	r0, r4
 8000268:	f7ff ff4e 	bl	8000108 <__udivsi3>
 800026c:	0003      	movs	r3, r0
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fdb9 	bl	8000de6 <HAL_SYSTICK_Config>
 8000274:	1e03      	subs	r3, r0, #0
 8000276:	d001      	beq.n	800027c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000278:	2301      	movs	r3, #1
 800027a:	e00f      	b.n	800029c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b03      	cmp	r3, #3
 8000280:	d80b      	bhi.n	800029a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	6879      	ldr	r1, [r7, #4]
 8000284:	2301      	movs	r3, #1
 8000286:	425b      	negs	r3, r3
 8000288:	2200      	movs	r2, #0
 800028a:	0018      	movs	r0, r3
 800028c:	f000 fd86 	bl	8000d9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <HAL_InitTick+0x64>)
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	0018      	movs	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	b003      	add	sp, #12
 80002a2:	bd90      	pop	{r4, r7, pc}
 80002a4:	2000000c 	.word	0x2000000c
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	001a      	movs	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	18d2      	adds	r2, r2, r3
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	601a      	str	r2, [r3, #0]
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	20000004 	.word	0x20000004
 80002d0:	2000002c 	.word	0x2000002c

080002d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	0018      	movs	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	2000002c 	.word	0x2000002c

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f0:	f7ff fff0 	bl	80002d4 <HAL_GetTick>
 80002f4:	0003      	movs	r3, r0
 80002f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	3301      	adds	r3, #1
 8000300:	d005      	beq.n	800030e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <HAL_Delay+0x44>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001a      	movs	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	189b      	adds	r3, r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	f7ff ffe0 	bl	80002d4 <HAL_GetTick>
 8000314:	0002      	movs	r2, r0
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d8f7      	bhi.n	8000310 <HAL_Delay+0x28>
  {
  }
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b004      	add	sp, #16
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	20000004 	.word	0x20000004

08000330 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000338:	230f      	movs	r3, #15
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d101      	bne.n	800034e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800034a:	2301      	movs	r3, #1
 800034c:	e125      	b.n	800059a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000352:	2b00      	cmp	r3, #0
 8000354:	d10a      	bne.n	800036c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2200      	movs	r2, #0
 800035a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2234      	movs	r2, #52	; 0x34
 8000360:	2100      	movs	r1, #0
 8000362:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	0018      	movs	r0, r3
 8000368:	f003 fa64 	bl	8003834 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000370:	2210      	movs	r2, #16
 8000372:	4013      	ands	r3, r2
 8000374:	d000      	beq.n	8000378 <HAL_ADC_Init+0x48>
 8000376:	e103      	b.n	8000580 <HAL_ADC_Init+0x250>
 8000378:	230f      	movs	r3, #15
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d000      	beq.n	8000384 <HAL_ADC_Init+0x54>
 8000382:	e0fd      	b.n	8000580 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	2204      	movs	r2, #4
 800038c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800038e:	d000      	beq.n	8000392 <HAL_ADC_Init+0x62>
 8000390:	e0f6      	b.n	8000580 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000396:	4a83      	ldr	r2, [pc, #524]	; (80005a4 <HAL_ADC_Init+0x274>)
 8000398:	4013      	ands	r3, r2
 800039a:	2202      	movs	r2, #2
 800039c:	431a      	orrs	r2, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	2203      	movs	r2, #3
 80003aa:	4013      	ands	r3, r2
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d112      	bne.n	80003d6 <HAL_ADC_Init+0xa6>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2201      	movs	r2, #1
 80003b8:	4013      	ands	r3, r2
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d009      	beq.n	80003d2 <HAL_ADC_Init+0xa2>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	2380      	movs	r3, #128	; 0x80
 80003c6:	021b      	lsls	r3, r3, #8
 80003c8:	401a      	ands	r2, r3
 80003ca:	2380      	movs	r3, #128	; 0x80
 80003cc:	021b      	lsls	r3, r3, #8
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d101      	bne.n	80003d6 <HAL_ADC_Init+0xa6>
 80003d2:	2301      	movs	r3, #1
 80003d4:	e000      	b.n	80003d8 <HAL_ADC_Init+0xa8>
 80003d6:	2300      	movs	r3, #0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d116      	bne.n	800040a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	2218      	movs	r2, #24
 80003e4:	4393      	bics	r3, r2
 80003e6:	0019      	movs	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	689a      	ldr	r2, [r3, #8]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	691b      	ldr	r3, [r3, #16]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	0899      	lsrs	r1, r3, #2
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	685a      	ldr	r2, [r3, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	430a      	orrs	r2, r1
 8000408:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	68da      	ldr	r2, [r3, #12]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4964      	ldr	r1, [pc, #400]	; (80005a8 <HAL_ADC_Init+0x278>)
 8000416:	400a      	ands	r2, r1
 8000418:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	7e1b      	ldrb	r3, [r3, #24]
 800041e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	7e5b      	ldrb	r3, [r3, #25]
 8000424:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000426:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	7e9b      	ldrb	r3, [r3, #26]
 800042c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800042e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000434:	2b01      	cmp	r3, #1
 8000436:	d002      	beq.n	800043e <HAL_ADC_Init+0x10e>
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	015b      	lsls	r3, r3, #5
 800043c:	e000      	b.n	8000440 <HAL_ADC_Init+0x110>
 800043e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000440:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000446:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	2b02      	cmp	r3, #2
 800044e:	d101      	bne.n	8000454 <HAL_ADC_Init+0x124>
 8000450:	2304      	movs	r3, #4
 8000452:	e000      	b.n	8000456 <HAL_ADC_Init+0x126>
 8000454:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000456:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2124      	movs	r1, #36	; 0x24
 800045c:	5c5b      	ldrb	r3, [r3, r1]
 800045e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000460:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	4313      	orrs	r3, r2
 8000466:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	7edb      	ldrb	r3, [r3, #27]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d115      	bne.n	800049c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7e9b      	ldrb	r3, [r3, #26]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d105      	bne.n	8000484 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	0252      	lsls	r2, r2, #9
 800047e:	4313      	orrs	r3, r2
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	e00b      	b.n	800049c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000488:	2220      	movs	r2, #32
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000494:	2201      	movs	r2, #1
 8000496:	431a      	orrs	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	69da      	ldr	r2, [r3, #28]
 80004a0:	23c2      	movs	r3, #194	; 0xc2
 80004a2:	33ff      	adds	r3, #255	; 0xff
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d007      	beq.n	80004b8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80004b0:	4313      	orrs	r3, r2
 80004b2:	68ba      	ldr	r2, [r7, #8]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	68d9      	ldr	r1, [r3, #12]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	430a      	orrs	r2, r1
 80004c6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	055b      	lsls	r3, r3, #21
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d01b      	beq.n	800050c <HAL_ADC_Init+0x1dc>
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d017      	beq.n	800050c <HAL_ADC_Init+0x1dc>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d013      	beq.n	800050c <HAL_ADC_Init+0x1dc>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d00f      	beq.n	800050c <HAL_ADC_Init+0x1dc>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d00b      	beq.n	800050c <HAL_ADC_Init+0x1dc>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f8:	2b05      	cmp	r3, #5
 80004fa:	d007      	beq.n	800050c <HAL_ADC_Init+0x1dc>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000500:	2b06      	cmp	r3, #6
 8000502:	d003      	beq.n	800050c <HAL_ADC_Init+0x1dc>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000508:	2b07      	cmp	r3, #7
 800050a:	d112      	bne.n	8000532 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2107      	movs	r1, #7
 8000518:	438a      	bics	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	6959      	ldr	r1, [r3, #20]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000526:	2207      	movs	r2, #7
 8000528:	401a      	ands	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	430a      	orrs	r2, r1
 8000530:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4a1c      	ldr	r2, [pc, #112]	; (80005ac <HAL_ADC_Init+0x27c>)
 800053a:	4013      	ands	r3, r2
 800053c:	68ba      	ldr	r2, [r7, #8]
 800053e:	429a      	cmp	r2, r3
 8000540:	d10b      	bne.n	800055a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800054c:	2203      	movs	r2, #3
 800054e:	4393      	bics	r3, r2
 8000550:	2201      	movs	r2, #1
 8000552:	431a      	orrs	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000558:	e01c      	b.n	8000594 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800055e:	2212      	movs	r2, #18
 8000560:	4393      	bics	r3, r2
 8000562:	2210      	movs	r2, #16
 8000564:	431a      	orrs	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800056e:	2201      	movs	r2, #1
 8000570:	431a      	orrs	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000576:	230f      	movs	r3, #15
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800057e:	e009      	b.n	8000594 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000584:	2210      	movs	r2, #16
 8000586:	431a      	orrs	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800058c:	230f      	movs	r3, #15
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000594:	230f      	movs	r3, #15
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	781b      	ldrb	r3, [r3, #0]
}
 800059a:	0018      	movs	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	b004      	add	sp, #16
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	fffffefd 	.word	0xfffffefd
 80005a8:	fffe0219 	.word	0xfffe0219
 80005ac:	833fffe7 	.word	0x833fffe7

080005b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b087      	sub	sp, #28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005bc:	2317      	movs	r3, #23
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	2204      	movs	r2, #4
 80005cc:	4013      	ands	r3, r2
 80005ce:	d15e      	bne.n	800068e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2234      	movs	r2, #52	; 0x34
 80005d4:	5c9b      	ldrb	r3, [r3, r2]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d101      	bne.n	80005de <HAL_ADC_Start_DMA+0x2e>
 80005da:	2302      	movs	r3, #2
 80005dc:	e05e      	b.n	800069c <HAL_ADC_Start_DMA+0xec>
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2234      	movs	r2, #52	; 0x34
 80005e2:	2101      	movs	r1, #1
 80005e4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	7e5b      	ldrb	r3, [r3, #25]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d007      	beq.n	80005fe <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80005ee:	2317      	movs	r3, #23
 80005f0:	18fc      	adds	r4, r7, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 f975 	bl	80008e4 <ADC_Enable>
 80005fa:	0003      	movs	r3, r0
 80005fc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80005fe:	2317      	movs	r3, #23
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d146      	bne.n	8000696 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800060c:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <HAL_ADC_Start_DMA+0xf4>)
 800060e:	4013      	ands	r3, r2
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	0052      	lsls	r2, r2, #1
 8000614:	431a      	orrs	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2200      	movs	r2, #0
 800061e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2234      	movs	r2, #52	; 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <HAL_ADC_Start_DMA+0xf8>)
 800062e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	4a1d      	ldr	r2, [pc, #116]	; (80006ac <HAL_ADC_Start_DMA+0xfc>)
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <HAL_ADC_Start_DMA+0x100>)
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	221c      	movs	r2, #28
 8000646:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	685a      	ldr	r2, [r3, #4]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2110      	movs	r1, #16
 8000654:	430a      	orrs	r2, r1
 8000656:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	68da      	ldr	r2, [r3, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2101      	movs	r1, #1
 8000664:	430a      	orrs	r2, r1
 8000666:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3340      	adds	r3, #64	; 0x40
 8000672:	0019      	movs	r1, r3
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f000 fc0a 	bl	8000e90 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2104      	movs	r1, #4
 8000688:	430a      	orrs	r2, r1
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	e003      	b.n	8000696 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800068e:	2317      	movs	r3, #23
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	2202      	movs	r2, #2
 8000694:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000696:	2317      	movs	r3, #23
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	781b      	ldrb	r3, [r3, #0]
}
 800069c:	0018      	movs	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	b007      	add	sp, #28
 80006a2:	bd90      	pop	{r4, r7, pc}
 80006a4:	fffff0fe 	.word	0xfffff0fe
 80006a8:	080009ed 	.word	0x080009ed
 80006ac:	08000aa1 	.word	0x08000aa1
 80006b0:	08000abf 	.word	0x08000abf

080006b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b002      	add	sp, #8
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b002      	add	sp, #8
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006ee:	230f      	movs	r3, #15
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	055b      	lsls	r3, r3, #21
 8000702:	429a      	cmp	r2, r3
 8000704:	d011      	beq.n	800072a <HAL_ADC_ConfigChannel+0x46>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	2b01      	cmp	r3, #1
 800070c:	d00d      	beq.n	800072a <HAL_ADC_ConfigChannel+0x46>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000712:	2b02      	cmp	r3, #2
 8000714:	d009      	beq.n	800072a <HAL_ADC_ConfigChannel+0x46>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071a:	2b03      	cmp	r3, #3
 800071c:	d005      	beq.n	800072a <HAL_ADC_ConfigChannel+0x46>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000722:	2b04      	cmp	r3, #4
 8000724:	d001      	beq.n	800072a <HAL_ADC_ConfigChannel+0x46>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2234      	movs	r2, #52	; 0x34
 800072e:	5c9b      	ldrb	r3, [r3, r2]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d101      	bne.n	8000738 <HAL_ADC_ConfigChannel+0x54>
 8000734:	2302      	movs	r3, #2
 8000736:	e0bb      	b.n	80008b0 <HAL_ADC_ConfigChannel+0x1cc>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	2101      	movs	r1, #1
 800073e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	2204      	movs	r2, #4
 8000748:	4013      	ands	r3, r2
 800074a:	d000      	beq.n	800074e <HAL_ADC_ConfigChannel+0x6a>
 800074c:	e09f      	b.n	800088e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	4a59      	ldr	r2, [pc, #356]	; (80008b8 <HAL_ADC_ConfigChannel+0x1d4>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d100      	bne.n	800075a <HAL_ADC_ConfigChannel+0x76>
 8000758:	e077      	b.n	800084a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2201      	movs	r2, #1
 8000766:	409a      	lsls	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	430a      	orrs	r2, r1
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	055b      	lsls	r3, r3, #21
 8000778:	429a      	cmp	r2, r3
 800077a:	d037      	beq.n	80007ec <HAL_ADC_ConfigChannel+0x108>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000780:	2b01      	cmp	r3, #1
 8000782:	d033      	beq.n	80007ec <HAL_ADC_ConfigChannel+0x108>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000788:	2b02      	cmp	r3, #2
 800078a:	d02f      	beq.n	80007ec <HAL_ADC_ConfigChannel+0x108>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000790:	2b03      	cmp	r3, #3
 8000792:	d02b      	beq.n	80007ec <HAL_ADC_ConfigChannel+0x108>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000798:	2b04      	cmp	r3, #4
 800079a:	d027      	beq.n	80007ec <HAL_ADC_ConfigChannel+0x108>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a0:	2b05      	cmp	r3, #5
 80007a2:	d023      	beq.n	80007ec <HAL_ADC_ConfigChannel+0x108>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a8:	2b06      	cmp	r3, #6
 80007aa:	d01f      	beq.n	80007ec <HAL_ADC_ConfigChannel+0x108>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b0:	2b07      	cmp	r3, #7
 80007b2:	d01b      	beq.n	80007ec <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	2107      	movs	r1, #7
 80007c0:	400b      	ands	r3, r1
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d012      	beq.n	80007ec <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	695a      	ldr	r2, [r3, #20]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2107      	movs	r1, #7
 80007d2:	438a      	bics	r2, r1
 80007d4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	6959      	ldr	r1, [r3, #20]
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	2207      	movs	r2, #7
 80007e2:	401a      	ands	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	430a      	orrs	r2, r1
 80007ea:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b10      	cmp	r3, #16
 80007f2:	d003      	beq.n	80007fc <HAL_ADC_ConfigChannel+0x118>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b11      	cmp	r3, #17
 80007fa:	d152      	bne.n	80008a2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007fc:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <HAL_ADC_ConfigChannel+0x1d8>)
 80007fe:	6819      	ldr	r1, [r3, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b10      	cmp	r3, #16
 8000806:	d102      	bne.n	800080e <HAL_ADC_ConfigChannel+0x12a>
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	041b      	lsls	r3, r3, #16
 800080c:	e001      	b.n	8000812 <HAL_ADC_ConfigChannel+0x12e>
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	03db      	lsls	r3, r3, #15
 8000812:	4a2a      	ldr	r2, [pc, #168]	; (80008bc <HAL_ADC_ConfigChannel+0x1d8>)
 8000814:	430b      	orrs	r3, r1
 8000816:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b10      	cmp	r3, #16
 800081e:	d140      	bne.n	80008a2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000820:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <HAL_ADC_ConfigChannel+0x1dc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4927      	ldr	r1, [pc, #156]	; (80008c4 <HAL_ADC_ConfigChannel+0x1e0>)
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff fc6e 	bl	8000108 <__udivsi3>
 800082c:	0003      	movs	r3, r0
 800082e:	001a      	movs	r2, r3
 8000830:	0013      	movs	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	189b      	adds	r3, r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800083a:	e002      	b.n	8000842 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	3b01      	subs	r3, #1
 8000840:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f9      	bne.n	800083c <HAL_ADC_ConfigChannel+0x158>
 8000848:	e02b      	b.n	80008a2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2101      	movs	r1, #1
 8000856:	4099      	lsls	r1, r3
 8000858:	000b      	movs	r3, r1
 800085a:	43d9      	mvns	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	400a      	ands	r2, r1
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b10      	cmp	r3, #16
 800086a:	d003      	beq.n	8000874 <HAL_ADC_ConfigChannel+0x190>
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b11      	cmp	r3, #17
 8000872:	d116      	bne.n	80008a2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_ADC_ConfigChannel+0x1d8>)
 8000876:	6819      	ldr	r1, [r3, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b10      	cmp	r3, #16
 800087e:	d101      	bne.n	8000884 <HAL_ADC_ConfigChannel+0x1a0>
 8000880:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000882:	e000      	b.n	8000886 <HAL_ADC_ConfigChannel+0x1a2>
 8000884:	4a11      	ldr	r2, [pc, #68]	; (80008cc <HAL_ADC_ConfigChannel+0x1e8>)
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_ADC_ConfigChannel+0x1d8>)
 8000888:	400a      	ands	r2, r1
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	e009      	b.n	80008a2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000892:	2220      	movs	r2, #32
 8000894:	431a      	orrs	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800089a:	230f      	movs	r3, #15
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2234      	movs	r2, #52	; 0x34
 80008a6:	2100      	movs	r1, #0
 80008a8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80008aa:	230f      	movs	r3, #15
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	781b      	ldrb	r3, [r3, #0]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b004      	add	sp, #16
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	00001001 	.word	0x00001001
 80008bc:	40012708 	.word	0x40012708
 80008c0:	2000000c 	.word	0x2000000c
 80008c4:	000f4240 	.word	0x000f4240
 80008c8:	ff7fffff 	.word	0xff7fffff
 80008cc:	ffbfffff 	.word	0xffbfffff

080008d0 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	b002      	add	sp, #8
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	2203      	movs	r2, #3
 80008fc:	4013      	ands	r3, r2
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d112      	bne.n	8000928 <ADC_Enable+0x44>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2201      	movs	r2, #1
 800090a:	4013      	ands	r3, r2
 800090c:	2b01      	cmp	r3, #1
 800090e:	d009      	beq.n	8000924 <ADC_Enable+0x40>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	401a      	ands	r2, r3
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	429a      	cmp	r2, r3
 8000922:	d101      	bne.n	8000928 <ADC_Enable+0x44>
 8000924:	2301      	movs	r3, #1
 8000926:	e000      	b.n	800092a <ADC_Enable+0x46>
 8000928:	2300      	movs	r3, #0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d152      	bne.n	80009d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <ADC_Enable+0xfc>)
 8000936:	4013      	ands	r3, r2
 8000938:	d00d      	beq.n	8000956 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800093e:	2210      	movs	r2, #16
 8000940:	431a      	orrs	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094a:	2201      	movs	r2, #1
 800094c:	431a      	orrs	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e03f      	b.n	80009d6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2101      	movs	r1, #1
 8000962:	430a      	orrs	r2, r1
 8000964:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <ADC_Enable+0x100>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	491f      	ldr	r1, [pc, #124]	; (80009e8 <ADC_Enable+0x104>)
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff fbcb 	bl	8000108 <__udivsi3>
 8000972:	0003      	movs	r3, r0
 8000974:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000976:	e002      	b.n	800097e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	3b01      	subs	r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f9      	bne.n	8000978 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000984:	f7ff fca6 	bl	80002d4 <HAL_GetTick>
 8000988:	0003      	movs	r3, r0
 800098a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800098c:	e01b      	b.n	80009c6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800098e:	f7ff fca1 	bl	80002d4 <HAL_GetTick>
 8000992:	0002      	movs	r2, r0
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	2b02      	cmp	r3, #2
 800099a:	d914      	bls.n	80009c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2201      	movs	r2, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d00d      	beq.n	80009c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ae:	2210      	movs	r2, #16
 80009b0:	431a      	orrs	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ba:	2201      	movs	r2, #1
 80009bc:	431a      	orrs	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e007      	b.n	80009d6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2201      	movs	r2, #1
 80009ce:	4013      	ands	r3, r2
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d1dc      	bne.n	800098e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	0018      	movs	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	b004      	add	sp, #16
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	80000017 	.word	0x80000017
 80009e4:	2000000c 	.word	0x2000000c
 80009e8:	000f4240 	.word	0x000f4240

080009ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009fe:	2250      	movs	r2, #80	; 0x50
 8000a00:	4013      	ands	r3, r2
 8000a02:	d140      	bne.n	8000a86 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	68da      	ldr	r2, [r3, #12]
 8000a18:	23c0      	movs	r3, #192	; 0xc0
 8000a1a:	011b      	lsls	r3, r3, #4
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	d12d      	bne.n	8000a7c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d129      	bne.n	8000a7c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2208      	movs	r2, #8
 8000a30:	4013      	ands	r3, r2
 8000a32:	2b08      	cmp	r3, #8
 8000a34:	d122      	bne.n	8000a7c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	4013      	ands	r3, r2
 8000a40:	d110      	bne.n	8000a64 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	210c      	movs	r1, #12
 8000a4e:	438a      	bics	r2, r1
 8000a50:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <ADC_DMAConvCplt+0xb0>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	639a      	str	r2, [r3, #56]	; 0x38
 8000a62:	e00b      	b.n	8000a7c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a68:	2220      	movs	r2, #32
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a74:	2201      	movs	r2, #1
 8000a76:	431a      	orrs	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fe18 	bl	80006b4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8000a84:	e005      	b.n	8000a92 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	0010      	movs	r0, r2
 8000a90:	4798      	blx	r3
}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b004      	add	sp, #16
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	fffffefe 	.word	0xfffffefe

08000aa0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aac:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff fe07 	bl	80006c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b004      	add	sp, #16
 8000abc:	bd80      	pop	{r7, pc}

08000abe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad0:	2240      	movs	r2, #64	; 0x40
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000adc:	2204      	movs	r2, #4
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f7ff fdf4 	bl	80006d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b004      	add	sp, #16
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000afc:	2317      	movs	r3, #23
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2234      	movs	r2, #52	; 0x34
 8000b10:	5c9b      	ldrb	r3, [r3, r2]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d101      	bne.n	8000b1a <HAL_ADCEx_Calibration_Start+0x26>
 8000b16:	2302      	movs	r3, #2
 8000b18:	e08d      	b.n	8000c36 <HAL_ADCEx_Calibration_Start+0x142>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2234      	movs	r2, #52	; 0x34
 8000b1e:	2101      	movs	r1, #1
 8000b20:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	2203      	movs	r2, #3
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d112      	bne.n	8000b56 <HAL_ADCEx_Calibration_Start+0x62>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2201      	movs	r2, #1
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d009      	beq.n	8000b52 <HAL_ADCEx_Calibration_Start+0x5e>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	401a      	ands	r2, r3
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d101      	bne.n	8000b56 <HAL_ADCEx_Calibration_Start+0x62>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <HAL_ADCEx_Calibration_Start+0x64>
 8000b56:	2300      	movs	r3, #0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d15b      	bne.n	8000c14 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b60:	4a37      	ldr	r2, [pc, #220]	; (8000c40 <HAL_ADCEx_Calibration_Start+0x14c>)
 8000b62:	4013      	ands	r3, r2
 8000b64:	2202      	movs	r2, #2
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	2203      	movs	r2, #3
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2103      	movs	r1, #3
 8000b84:	438a      	bics	r2, r1
 8000b86:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2180      	movs	r1, #128	; 0x80
 8000b94:	0609      	lsls	r1, r1, #24
 8000b96:	430a      	orrs	r2, r1
 8000b98:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000b9a:	f7ff fb9b 	bl	80002d4 <HAL_GetTick>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000ba2:	e01d      	b.n	8000be0 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000ba4:	f7ff fb96 	bl	80002d4 <HAL_GetTick>
 8000ba8:	0002      	movs	r2, r0
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d916      	bls.n	8000be0 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	0fdb      	lsrs	r3, r3, #31
 8000bba:	07da      	lsls	r2, r3, #31
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	061b      	lsls	r3, r3, #24
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d10d      	bne.n	8000be0 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc8:	2212      	movs	r2, #18
 8000bca:	4393      	bics	r3, r2
 8000bcc:	2210      	movs	r2, #16
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2234      	movs	r2, #52	; 0x34
 8000bd8:	2100      	movs	r1, #0
 8000bda:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e02a      	b.n	8000c36 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	0fdb      	lsrs	r3, r3, #31
 8000be8:	07da      	lsls	r2, r3, #31
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	061b      	lsls	r3, r3, #24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d0d8      	beq.n	8000ba4 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68d9      	ldr	r1, [r3, #12]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c06:	2203      	movs	r2, #3
 8000c08:	4393      	bics	r3, r2
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	639a      	str	r2, [r3, #56]	; 0x38
 8000c12:	e009      	b.n	8000c28 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c18:	2220      	movs	r2, #32
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000c20:	2317      	movs	r3, #23
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2234      	movs	r2, #52	; 0x34
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000c30:	2317      	movs	r3, #23
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	781b      	ldrb	r3, [r3, #0]
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b006      	add	sp, #24
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	fffffefd 	.word	0xfffffefd

08000c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b7f      	cmp	r3, #127	; 0x7f
 8000c56:	d809      	bhi.n	8000c6c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	231f      	movs	r3, #31
 8000c60:	401a      	ands	r2, r3
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_EnableIRQ+0x30>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	4091      	lsls	r1, r2
 8000c68:	000a      	movs	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]
  }
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	0002      	movs	r2, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c8c:	d828      	bhi.n	8000ce0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8e:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <__NVIC_SetPriority+0xd4>)
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	33c0      	adds	r3, #192	; 0xc0
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	589b      	ldr	r3, [r3, r2]
 8000c9e:	1dfa      	adds	r2, r7, #7
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	00d2      	lsls	r2, r2, #3
 8000caa:	21ff      	movs	r1, #255	; 0xff
 8000cac:	4091      	lsls	r1, r2
 8000cae:	000a      	movs	r2, r1
 8000cb0:	43d2      	mvns	r2, r2
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	22ff      	movs	r2, #255	; 0xff
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	4003      	ands	r3, r0
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ccc:	481f      	ldr	r0, [pc, #124]	; (8000d4c <__NVIC_SetPriority+0xd4>)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	33c0      	adds	r3, #192	; 0xc0
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cde:	e031      	b.n	8000d44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <__NVIC_SetPriority+0xd8>)
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	230f      	movs	r3, #15
 8000cea:	400b      	ands	r3, r1
 8000cec:	3b08      	subs	r3, #8
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	3306      	adds	r3, #6
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	18d3      	adds	r3, r2, r3
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1dfa      	adds	r2, r7, #7
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	0011      	movs	r1, r2
 8000d00:	2203      	movs	r2, #3
 8000d02:	400a      	ands	r2, r1
 8000d04:	00d2      	lsls	r2, r2, #3
 8000d06:	21ff      	movs	r1, #255	; 0xff
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	000a      	movs	r2, r1
 8000d0c:	43d2      	mvns	r2, r2
 8000d0e:	401a      	ands	r2, r3
 8000d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	019b      	lsls	r3, r3, #6
 8000d16:	22ff      	movs	r2, #255	; 0xff
 8000d18:	401a      	ands	r2, r3
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	2303      	movs	r3, #3
 8000d22:	4003      	ands	r3, r0
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <__NVIC_SetPriority+0xd8>)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	001c      	movs	r4, r3
 8000d30:	230f      	movs	r3, #15
 8000d32:	4023      	ands	r3, r4
 8000d34:	3b08      	subs	r3, #8
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	3306      	adds	r3, #6
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	18c3      	adds	r3, r0, r3
 8000d40:	3304      	adds	r3, #4
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b003      	add	sp, #12
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	045b      	lsls	r3, r3, #17
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d301      	bcc.n	8000d6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e010      	b.n	8000d8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <SysTick_Config+0x44>)
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	3a01      	subs	r2, #1
 8000d72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d74:	2301      	movs	r3, #1
 8000d76:	425b      	negs	r3, r3
 8000d78:	2103      	movs	r1, #3
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff ff7c 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SysTick_Config+0x44>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SysTick_Config+0x44>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	210f      	movs	r1, #15
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	1c02      	adds	r2, r0, #0
 8000dac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	0011      	movs	r1, r2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff ff5d 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	0002      	movs	r2, r0
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff ff33 	bl	8000c44 <__NVIC_EnableIRQ>
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff ffaf 	bl	8000d54 <SysTick_Config>
 8000df6:	0003      	movs	r3, r0
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e036      	b.n	8000e84 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2221      	movs	r2, #33	; 0x21
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <HAL_DMA_Init+0x8c>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 f946 	bl	80010f8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2221      	movs	r2, #33	; 0x21
 8000e76:	2101      	movs	r1, #1
 8000e78:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	2100      	movs	r1, #0
 8000e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	0018      	movs	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b004      	add	sp, #16
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	ffffc00f 	.word	0xffffc00f

08000e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9e:	2317      	movs	r3, #23
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	5c9b      	ldrb	r3, [r3, r2]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d101      	bne.n	8000eb4 <HAL_DMA_Start_IT+0x24>
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e04f      	b.n	8000f54 <HAL_DMA_Start_IT+0xc4>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	2101      	movs	r1, #1
 8000eba:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2221      	movs	r2, #33	; 0x21
 8000ec0:	5c9b      	ldrb	r3, [r3, r2]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d13a      	bne.n	8000f3e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2221      	movs	r2, #33	; 0x21
 8000ecc:	2102      	movs	r1, #2
 8000ece:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	438a      	bics	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f8d7 	bl	80010a0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d008      	beq.n	8000f0c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	210e      	movs	r1, #14
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e00f      	b.n	8000f2c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	210a      	movs	r1, #10
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2104      	movs	r1, #4
 8000f28:	438a      	bics	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2101      	movs	r1, #1
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	e007      	b.n	8000f4e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2220      	movs	r2, #32
 8000f42:	2100      	movs	r1, #0
 8000f44:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f46:	2317      	movs	r3, #23
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000f4e:	2317      	movs	r3, #23
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	781b      	ldrb	r3, [r3, #0]
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b006      	add	sp, #24
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	2204      	movs	r2, #4
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	4013      	ands	r3, r2
 8000f82:	d024      	beq.n	8000fce <HAL_DMA_IRQHandler+0x72>
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2204      	movs	r2, #4
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d020      	beq.n	8000fce <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2220      	movs	r2, #32
 8000f94:	4013      	ands	r3, r2
 8000f96:	d107      	bne.n	8000fa8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	438a      	bics	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4091      	lsls	r1, r2
 8000fb4:	000a      	movs	r2, r1
 8000fb6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d100      	bne.n	8000fc2 <HAL_DMA_IRQHandler+0x66>
 8000fc0:	e06a      	b.n	8001098 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	0010      	movs	r0, r2
 8000fca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000fcc:	e064      	b.n	8001098 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d02b      	beq.n	8001036 <HAL_DMA_IRQHandler+0xda>
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d027      	beq.n	8001036 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2220      	movs	r2, #32
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d10b      	bne.n	800100a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	210a      	movs	r1, #10
 8000ffe:	438a      	bics	r2, r1
 8001000:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2221      	movs	r2, #33	; 0x21
 8001006:	2101      	movs	r1, #1
 8001008:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001012:	2102      	movs	r1, #2
 8001014:	4091      	lsls	r1, r2
 8001016:	000a      	movs	r2, r1
 8001018:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2220      	movs	r2, #32
 800101e:	2100      	movs	r1, #0
 8001020:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	2b00      	cmp	r3, #0
 8001028:	d036      	beq.n	8001098 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	0010      	movs	r0, r2
 8001032:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001034:	e030      	b.n	8001098 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	2208      	movs	r2, #8
 800103c:	409a      	lsls	r2, r3
 800103e:	0013      	movs	r3, r2
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	4013      	ands	r3, r2
 8001044:	d028      	beq.n	8001098 <HAL_DMA_IRQHandler+0x13c>
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2208      	movs	r2, #8
 800104a:	4013      	ands	r3, r2
 800104c:	d024      	beq.n	8001098 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	210e      	movs	r1, #14
 800105a:	438a      	bics	r2, r1
 800105c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001066:	2101      	movs	r1, #1
 8001068:	4091      	lsls	r1, r2
 800106a:	000a      	movs	r2, r1
 800106c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2221      	movs	r2, #33	; 0x21
 8001078:	2101      	movs	r1, #1
 800107a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2220      	movs	r2, #32
 8001080:	2100      	movs	r1, #0
 8001082:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	0010      	movs	r0, r2
 8001094:	4798      	blx	r3
    }
  }
}
 8001096:	e7ff      	b.n	8001098 <HAL_DMA_IRQHandler+0x13c>
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bd80      	pop	{r7, pc}

080010a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b6:	2101      	movs	r1, #1
 80010b8:	4091      	lsls	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	d108      	bne.n	80010e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010de:	e007      	b.n	80010f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	60da      	str	r2, [r3, #12]
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b004      	add	sp, #16
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a08      	ldr	r2, [pc, #32]	; (8001128 <DMA_CalcBaseAndBitshift+0x30>)
 8001106:	4694      	mov	ip, r2
 8001108:	4463      	add	r3, ip
 800110a:	2114      	movs	r1, #20
 800110c:	0018      	movs	r0, r3
 800110e:	f7fe fffb 	bl	8000108 <__udivsi3>
 8001112:	0003      	movs	r3, r0
 8001114:	009a      	lsls	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a03      	ldr	r2, [pc, #12]	; (800112c <DMA_CalcBaseAndBitshift+0x34>)
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}
 8001128:	bffdfff8 	.word	0xbffdfff8
 800112c:	40020000 	.word	0x40020000

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	e14f      	b.n	80013e0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4091      	lsls	r1, r2
 800114a:	000a      	movs	r2, r1
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d100      	bne.n	8001158 <HAL_GPIO_Init+0x28>
 8001156:	e140      	b.n	80013da <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	2b01      	cmp	r3, #1
 8001162:	d005      	beq.n	8001170 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2203      	movs	r2, #3
 800116a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800116c:	2b02      	cmp	r3, #2
 800116e:	d130      	bne.n	80011d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	409a      	lsls	r2, r3
 800117e:	0013      	movs	r3, r2
 8001180:	43da      	mvns	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	409a      	lsls	r2, r3
 8001192:	0013      	movs	r3, r2
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a6:	2201      	movs	r2, #1
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	43da      	mvns	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	2201      	movs	r2, #1
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2203      	movs	r2, #3
 80011d8:	4013      	ands	r3, r2
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d017      	beq.n	800120e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	43da      	mvns	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2203      	movs	r2, #3
 8001214:	4013      	ands	r3, r2
 8001216:	2b02      	cmp	r3, #2
 8001218:	d123      	bne.n	8001262 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	58d3      	ldr	r3, [r2, r3]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2207      	movs	r2, #7
 800122c:	4013      	ands	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2107      	movs	r1, #7
 8001246:	400b      	ands	r3, r1
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	6939      	ldr	r1, [r7, #16]
 8001260:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	409a      	lsls	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	43da      	mvns	r2, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2203      	movs	r2, #3
 8001280:	401a      	ands	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	23c0      	movs	r3, #192	; 0xc0
 800129c:	029b      	lsls	r3, r3, #10
 800129e:	4013      	ands	r3, r2
 80012a0:	d100      	bne.n	80012a4 <HAL_GPIO_Init+0x174>
 80012a2:	e09a      	b.n	80013da <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a4:	4b54      	ldr	r3, [pc, #336]	; (80013f8 <HAL_GPIO_Init+0x2c8>)
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <HAL_GPIO_Init+0x2c8>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	430a      	orrs	r2, r1
 80012ae:	619a      	str	r2, [r3, #24]
 80012b0:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <HAL_GPIO_Init+0x2c8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4013      	ands	r3, r2
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012bc:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <HAL_GPIO_Init+0x2cc>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	589b      	ldr	r3, [r3, r2]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2203      	movs	r2, #3
 80012ce:	4013      	ands	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	409a      	lsls	r2, r3
 80012d6:	0013      	movs	r3, r2
 80012d8:	43da      	mvns	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	2390      	movs	r3, #144	; 0x90
 80012e4:	05db      	lsls	r3, r3, #23
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x1e2>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a44      	ldr	r2, [pc, #272]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x1de>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a43      	ldr	r2, [pc, #268]	; (8001404 <HAL_GPIO_Init+0x2d4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x1da>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a42      	ldr	r2, [pc, #264]	; (8001408 <HAL_GPIO_Init+0x2d8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x1d6>
 8001302:	2303      	movs	r3, #3
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x1e4>
 8001306:	2305      	movs	r3, #5
 8001308:	e004      	b.n	8001314 <HAL_GPIO_Init+0x1e4>
 800130a:	2302      	movs	r3, #2
 800130c:	e002      	b.n	8001314 <HAL_GPIO_Init+0x1e4>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x1e4>
 8001312:	2300      	movs	r3, #0
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	2103      	movs	r1, #3
 8001318:	400a      	ands	r2, r1
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	4093      	lsls	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001324:	4935      	ldr	r1, [pc, #212]	; (80013fc <HAL_GPIO_Init+0x2cc>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_GPIO_Init+0x2dc>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	035b      	lsls	r3, r3, #13
 800134a:	4013      	ands	r3, r2
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_GPIO_Init+0x2dc>)
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <HAL_GPIO_Init+0x2dc>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43da      	mvns	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	039b      	lsls	r3, r3, #14
 8001374:	4013      	ands	r3, r2
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <HAL_GPIO_Init+0x2dc>)
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <HAL_GPIO_Init+0x2dc>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43da      	mvns	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	029b      	lsls	r3, r3, #10
 800139e:	4013      	ands	r3, r2
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_GPIO_Init+0x2dc>)
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_GPIO_Init+0x2dc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43da      	mvns	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	025b      	lsls	r3, r3, #9
 80013c8:	4013      	ands	r3, r2
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_GPIO_Init+0x2dc>)
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	40da      	lsrs	r2, r3
 80013e8:	1e13      	subs	r3, r2, #0
 80013ea:	d000      	beq.n	80013ee <HAL_GPIO_Init+0x2be>
 80013ec:	e6a8      	b.n	8001140 <HAL_GPIO_Init+0x10>
  } 
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b006      	add	sp, #24
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	48000400 	.word	0x48000400
 8001404:	48000800 	.word	0x48000800
 8001408:	48000c00 	.word	0x48000c00
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	000a      	movs	r2, r1
 800141a:	1cbb      	adds	r3, r7, #2
 800141c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	1cba      	adds	r2, r7, #2
 8001424:	8812      	ldrh	r2, [r2, #0]
 8001426:	4013      	ands	r3, r2
 8001428:	d004      	beq.n	8001434 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800142a:	230f      	movs	r3, #15
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	e003      	b.n	800143c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001434:	230f      	movs	r3, #15
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800143c:	230f      	movs	r3, #15
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	781b      	ldrb	r3, [r3, #0]
  }
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	b004      	add	sp, #16
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	0008      	movs	r0, r1
 8001454:	0011      	movs	r1, r2
 8001456:	1cbb      	adds	r3, r7, #2
 8001458:	1c02      	adds	r2, r0, #0
 800145a:	801a      	strh	r2, [r3, #0]
 800145c:	1c7b      	adds	r3, r7, #1
 800145e:	1c0a      	adds	r2, r1, #0
 8001460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001462:	1c7b      	adds	r3, r7, #1
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146a:	1cbb      	adds	r3, r7, #2
 800146c:	881a      	ldrh	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001472:	e003      	b.n	800147c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001474:	1cbb      	adds	r3, r7, #2
 8001476:	881a      	ldrh	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b002      	add	sp, #8
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e301      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	4013      	ands	r3, r2
 800149e:	d100      	bne.n	80014a2 <HAL_RCC_OscConfig+0x1e>
 80014a0:	e08d      	b.n	80015be <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014a2:	4bc3      	ldr	r3, [pc, #780]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	220c      	movs	r2, #12
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d00e      	beq.n	80014cc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ae:	4bc0      	ldr	r3, [pc, #768]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	220c      	movs	r2, #12
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x64>
 80014ba:	4bbd      	ldr	r3, [pc, #756]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	401a      	ands	r2, r3
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d10d      	bne.n	80014e8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	4bb8      	ldr	r3, [pc, #736]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	029b      	lsls	r3, r3, #10
 80014d4:	4013      	ands	r3, r2
 80014d6:	d100      	bne.n	80014da <HAL_RCC_OscConfig+0x56>
 80014d8:	e070      	b.n	80015bc <HAL_RCC_OscConfig+0x138>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d000      	beq.n	80014e4 <HAL_RCC_OscConfig+0x60>
 80014e2:	e06b      	b.n	80015bc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e2d8      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d107      	bne.n	8001500 <HAL_RCC_OscConfig+0x7c>
 80014f0:	4baf      	ldr	r3, [pc, #700]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4bae      	ldr	r3, [pc, #696]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	0249      	lsls	r1, r1, #9
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e02f      	b.n	8001560 <HAL_RCC_OscConfig+0xdc>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x9e>
 8001508:	4ba9      	ldr	r3, [pc, #676]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4ba8      	ldr	r3, [pc, #672]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800150e:	49a9      	ldr	r1, [pc, #676]	; (80017b4 <HAL_RCC_OscConfig+0x330>)
 8001510:	400a      	ands	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	4ba6      	ldr	r3, [pc, #664]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4ba5      	ldr	r3, [pc, #660]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800151a:	49a7      	ldr	r1, [pc, #668]	; (80017b8 <HAL_RCC_OscConfig+0x334>)
 800151c:	400a      	ands	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e01e      	b.n	8001560 <HAL_RCC_OscConfig+0xdc>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d10e      	bne.n	8001548 <HAL_RCC_OscConfig+0xc4>
 800152a:	4ba1      	ldr	r3, [pc, #644]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4ba0      	ldr	r3, [pc, #640]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	02c9      	lsls	r1, r1, #11
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	4b9d      	ldr	r3, [pc, #628]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b9c      	ldr	r3, [pc, #624]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800153e:	2180      	movs	r1, #128	; 0x80
 8001540:	0249      	lsls	r1, r1, #9
 8001542:	430a      	orrs	r2, r1
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xdc>
 8001548:	4b99      	ldr	r3, [pc, #612]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b98      	ldr	r3, [pc, #608]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800154e:	4999      	ldr	r1, [pc, #612]	; (80017b4 <HAL_RCC_OscConfig+0x330>)
 8001550:	400a      	ands	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	4b96      	ldr	r3, [pc, #600]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b95      	ldr	r3, [pc, #596]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800155a:	4997      	ldr	r1, [pc, #604]	; (80017b8 <HAL_RCC_OscConfig+0x334>)
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d014      	beq.n	8001592 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7fe feb4 	bl	80002d4 <HAL_GetTick>
 800156c:	0003      	movs	r3, r0
 800156e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001572:	f7fe feaf 	bl	80002d4 <HAL_GetTick>
 8001576:	0002      	movs	r2, r0
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b64      	cmp	r3, #100	; 0x64
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e28a      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001584:	4b8a      	ldr	r3, [pc, #552]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	029b      	lsls	r3, r3, #10
 800158c:	4013      	ands	r3, r2
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0xee>
 8001590:	e015      	b.n	80015be <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7fe fe9f 	bl	80002d4 <HAL_GetTick>
 8001596:	0003      	movs	r3, r0
 8001598:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159c:	f7fe fe9a 	bl	80002d4 <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e275      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b80      	ldr	r3, [pc, #512]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	029b      	lsls	r3, r3, #10
 80015b6:	4013      	ands	r3, r2
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x118>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d100      	bne.n	80015ca <HAL_RCC_OscConfig+0x146>
 80015c8:	e069      	b.n	800169e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015ca:	4b79      	ldr	r3, [pc, #484]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	220c      	movs	r2, #12
 80015d0:	4013      	ands	r3, r2
 80015d2:	d00b      	beq.n	80015ec <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015d4:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	220c      	movs	r2, #12
 80015da:	4013      	ands	r3, r2
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d11c      	bne.n	800161a <HAL_RCC_OscConfig+0x196>
 80015e0:	4b73      	ldr	r3, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	025b      	lsls	r3, r3, #9
 80015e8:	4013      	ands	r3, r2
 80015ea:	d116      	bne.n	800161a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ec:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2202      	movs	r2, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_OscConfig+0x17e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e24b      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b6b      	ldr	r3, [pc, #428]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	22f8      	movs	r2, #248	; 0xf8
 8001608:	4393      	bics	r3, r2
 800160a:	0019      	movs	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	00da      	lsls	r2, r3, #3
 8001612:	4b67      	ldr	r3, [pc, #412]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001618:	e041      	b.n	800169e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d024      	beq.n	800166c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001622:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b62      	ldr	r3, [pc, #392]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001628:	2101      	movs	r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7fe fe51 	bl	80002d4 <HAL_GetTick>
 8001632:	0003      	movs	r3, r0
 8001634:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001638:	f7fe fe4c 	bl	80002d4 <HAL_GetTick>
 800163c:	0002      	movs	r2, r0
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e227      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164a:	4b59      	ldr	r3, [pc, #356]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2202      	movs	r2, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d0f1      	beq.n	8001638 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b56      	ldr	r3, [pc, #344]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	22f8      	movs	r2, #248	; 0xf8
 800165a:	4393      	bics	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	00da      	lsls	r2, r3, #3
 8001664:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e018      	b.n	800169e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166c:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001672:	2101      	movs	r1, #1
 8001674:	438a      	bics	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7fe fe2c 	bl	80002d4 <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001682:	f7fe fe27 	bl	80002d4 <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e202      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001694:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2202      	movs	r2, #2
 800169a:	4013      	ands	r3, r2
 800169c:	d1f1      	bne.n	8001682 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2208      	movs	r2, #8
 80016a4:	4013      	ands	r3, r2
 80016a6:	d036      	beq.n	8001716 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d019      	beq.n	80016e4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b0:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b4:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7fe fe0a 	bl	80002d4 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c6:	f7fe fe05 	bl	80002d4 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1e0      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d8:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	2202      	movs	r2, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	d0f1      	beq.n	80016c6 <HAL_RCC_OscConfig+0x242>
 80016e2:	e018      	b.n	8001716 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e4:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e8:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	2101      	movs	r1, #1
 80016ec:	438a      	bics	r2, r1
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7fe fdf0 	bl	80002d4 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fa:	f7fe fdeb 	bl	80002d4 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e1c6      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	2202      	movs	r2, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d1f1      	bne.n	80016fa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2204      	movs	r2, #4
 800171c:	4013      	ands	r3, r2
 800171e:	d100      	bne.n	8001722 <HAL_RCC_OscConfig+0x29e>
 8001720:	e0b4      	b.n	800188c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	201f      	movs	r0, #31
 8001724:	183b      	adds	r3, r7, r0
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	055b      	lsls	r3, r3, #21
 8001732:	4013      	ands	r3, r2
 8001734:	d110      	bne.n	8001758 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	0549      	lsls	r1, r1, #21
 8001740:	430a      	orrs	r2, r1
 8001742:	61da      	str	r2, [r3, #28]
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 8001746:	69da      	ldr	r2, [r3, #28]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	055b      	lsls	r3, r3, #21
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001752:	183b      	adds	r3, r7, r0
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_RCC_OscConfig+0x338>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4013      	ands	r3, r2
 8001762:	d11a      	bne.n	800179a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_RCC_OscConfig+0x338>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_RCC_OscConfig+0x338>)
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	0049      	lsls	r1, r1, #1
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001772:	f7fe fdaf 	bl	80002d4 <HAL_GetTick>
 8001776:	0003      	movs	r3, r0
 8001778:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177c:	f7fe fdaa 	bl	80002d4 <HAL_GetTick>
 8001780:	0002      	movs	r2, r0
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e185      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCC_OscConfig+0x338>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4013      	ands	r3, r2
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d10e      	bne.n	80017c0 <HAL_RCC_OscConfig+0x33c>
 80017a2:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80017a4:	6a1a      	ldr	r2, [r3, #32]
 80017a6:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <HAL_RCC_OscConfig+0x32c>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	430a      	orrs	r2, r1
 80017ac:	621a      	str	r2, [r3, #32]
 80017ae:	e035      	b.n	800181c <HAL_RCC_OscConfig+0x398>
 80017b0:	40021000 	.word	0x40021000
 80017b4:	fffeffff 	.word	0xfffeffff
 80017b8:	fffbffff 	.word	0xfffbffff
 80017bc:	40007000 	.word	0x40007000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x35e>
 80017c8:	4bb6      	ldr	r3, [pc, #728]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80017ca:	6a1a      	ldr	r2, [r3, #32]
 80017cc:	4bb5      	ldr	r3, [pc, #724]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	438a      	bics	r2, r1
 80017d2:	621a      	str	r2, [r3, #32]
 80017d4:	4bb3      	ldr	r3, [pc, #716]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80017d6:	6a1a      	ldr	r2, [r3, #32]
 80017d8:	4bb2      	ldr	r3, [pc, #712]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80017da:	2104      	movs	r1, #4
 80017dc:	438a      	bics	r2, r1
 80017de:	621a      	str	r2, [r3, #32]
 80017e0:	e01c      	b.n	800181c <HAL_RCC_OscConfig+0x398>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x380>
 80017ea:	4bae      	ldr	r3, [pc, #696]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	4bad      	ldr	r3, [pc, #692]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80017f0:	2104      	movs	r1, #4
 80017f2:	430a      	orrs	r2, r1
 80017f4:	621a      	str	r2, [r3, #32]
 80017f6:	4bab      	ldr	r3, [pc, #684]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80017f8:	6a1a      	ldr	r2, [r3, #32]
 80017fa:	4baa      	ldr	r3, [pc, #680]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	430a      	orrs	r2, r1
 8001800:	621a      	str	r2, [r3, #32]
 8001802:	e00b      	b.n	800181c <HAL_RCC_OscConfig+0x398>
 8001804:	4ba7      	ldr	r3, [pc, #668]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001806:	6a1a      	ldr	r2, [r3, #32]
 8001808:	4ba6      	ldr	r3, [pc, #664]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 800180a:	2101      	movs	r1, #1
 800180c:	438a      	bics	r2, r1
 800180e:	621a      	str	r2, [r3, #32]
 8001810:	4ba4      	ldr	r3, [pc, #656]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001812:	6a1a      	ldr	r2, [r3, #32]
 8001814:	4ba3      	ldr	r3, [pc, #652]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001816:	2104      	movs	r1, #4
 8001818:	438a      	bics	r2, r1
 800181a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d014      	beq.n	800184e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001824:	f7fe fd56 	bl	80002d4 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182c:	e009      	b.n	8001842 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7fe fd51 	bl	80002d4 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	4a9b      	ldr	r2, [pc, #620]	; (8001aa8 <HAL_RCC_OscConfig+0x624>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e12b      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001842:	4b98      	ldr	r3, [pc, #608]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	2202      	movs	r2, #2
 8001848:	4013      	ands	r3, r2
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x3aa>
 800184c:	e013      	b.n	8001876 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7fe fd41 	bl	80002d4 <HAL_GetTick>
 8001852:	0003      	movs	r3, r0
 8001854:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001856:	e009      	b.n	800186c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7fe fd3c 	bl	80002d4 <HAL_GetTick>
 800185c:	0002      	movs	r2, r0
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	4a91      	ldr	r2, [pc, #580]	; (8001aa8 <HAL_RCC_OscConfig+0x624>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e116      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	4b8d      	ldr	r3, [pc, #564]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	2202      	movs	r2, #2
 8001872:	4013      	ands	r3, r2
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001876:	231f      	movs	r3, #31
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001882:	69da      	ldr	r2, [r3, #28]
 8001884:	4b87      	ldr	r3, [pc, #540]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001886:	4989      	ldr	r1, [pc, #548]	; (8001aac <HAL_RCC_OscConfig+0x628>)
 8001888:	400a      	ands	r2, r1
 800188a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2210      	movs	r2, #16
 8001892:	4013      	ands	r3, r2
 8001894:	d063      	beq.n	800195e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d12a      	bne.n	80018f4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800189e:	4b81      	ldr	r3, [pc, #516]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80018a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a2:	4b80      	ldr	r3, [pc, #512]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80018a4:	2104      	movs	r1, #4
 80018a6:	430a      	orrs	r2, r1
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018aa:	4b7e      	ldr	r3, [pc, #504]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ae:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	430a      	orrs	r2, r1
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7fe fd0d 	bl	80002d4 <HAL_GetTick>
 80018ba:	0003      	movs	r3, r0
 80018bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018c0:	f7fe fd08 	bl	80002d4 <HAL_GetTick>
 80018c4:	0002      	movs	r2, r0
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e0e3      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018d2:	4b74      	ldr	r3, [pc, #464]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80018d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d6:	2202      	movs	r2, #2
 80018d8:	4013      	ands	r3, r2
 80018da:	d0f1      	beq.n	80018c0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018dc:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80018de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e0:	22f8      	movs	r2, #248	; 0xf8
 80018e2:	4393      	bics	r3, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	00da      	lsls	r2, r3, #3
 80018ec:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80018ee:	430a      	orrs	r2, r1
 80018f0:	635a      	str	r2, [r3, #52]	; 0x34
 80018f2:	e034      	b.n	800195e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	3305      	adds	r3, #5
 80018fa:	d111      	bne.n	8001920 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018fc:	4b69      	ldr	r3, [pc, #420]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80018fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001900:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001902:	2104      	movs	r1, #4
 8001904:	438a      	bics	r2, r1
 8001906:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190c:	22f8      	movs	r2, #248	; 0xf8
 800190e:	4393      	bics	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	00da      	lsls	r2, r3, #3
 8001918:	4b62      	ldr	r3, [pc, #392]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 800191a:	430a      	orrs	r2, r1
 800191c:	635a      	str	r2, [r3, #52]	; 0x34
 800191e:	e01e      	b.n	800195e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001920:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001924:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001926:	2104      	movs	r1, #4
 8001928:	430a      	orrs	r2, r1
 800192a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800192c:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 800192e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001930:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001932:	2101      	movs	r1, #1
 8001934:	438a      	bics	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7fe fccc 	bl	80002d4 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001942:	f7fe fcc7 	bl	80002d4 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0a2      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001954:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d1f1      	bne.n	8001942 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d100      	bne.n	8001968 <HAL_RCC_OscConfig+0x4e4>
 8001966:	e097      	b.n	8001a98 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001968:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	220c      	movs	r2, #12
 800196e:	4013      	ands	r3, r2
 8001970:	2b08      	cmp	r3, #8
 8001972:	d100      	bne.n	8001976 <HAL_RCC_OscConfig+0x4f2>
 8001974:	e06b      	b.n	8001a4e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d14c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b48      	ldr	r3, [pc, #288]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001984:	494a      	ldr	r1, [pc, #296]	; (8001ab0 <HAL_RCC_OscConfig+0x62c>)
 8001986:	400a      	ands	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7fe fca3 	bl	80002d4 <HAL_GetTick>
 800198e:	0003      	movs	r3, r0
 8001990:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001994:	f7fe fc9e 	bl	80002d4 <HAL_GetTick>
 8001998:	0002      	movs	r2, r0
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e079      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a6:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	049b      	lsls	r3, r3, #18
 80019ae:	4013      	ands	r3, r2
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b2:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	220f      	movs	r2, #15
 80019b8:	4393      	bics	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c0:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4a3a      	ldr	r2, [pc, #232]	; (8001ab4 <HAL_RCC_OscConfig+0x630>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	431a      	orrs	r2, r3
 80019da:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80019dc:	430a      	orrs	r2, r1
 80019de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e0:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 80019e6:	2180      	movs	r1, #128	; 0x80
 80019e8:	0449      	lsls	r1, r1, #17
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7fe fc71 	bl	80002d4 <HAL_GetTick>
 80019f2:	0003      	movs	r3, r0
 80019f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f8:	f7fe fc6c 	bl	80002d4 <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e047      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	049b      	lsls	r3, r3, #18
 8001a12:	4013      	ands	r3, r2
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x574>
 8001a16:	e03f      	b.n	8001a98 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001a1e:	4924      	ldr	r1, [pc, #144]	; (8001ab0 <HAL_RCC_OscConfig+0x62c>)
 8001a20:	400a      	ands	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7fe fc56 	bl	80002d4 <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7fe fc51 	bl	80002d4 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e02c      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	049b      	lsls	r3, r3, #18
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x5aa>
 8001a4c:	e024      	b.n	8001a98 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e01f      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	025b      	lsls	r3, r3, #9
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d10e      	bne.n	8001a94 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	220f      	movs	r2, #15
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	23f0      	movs	r3, #240	; 0xf0
 8001a88:	039b      	lsls	r3, r3, #14
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b008      	add	sp, #32
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	00001388 	.word	0x00001388
 8001aac:	efffffff 	.word	0xefffffff
 8001ab0:	feffffff 	.word	0xfeffffff
 8001ab4:	ffc2ffff 	.word	0xffc2ffff

08001ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0b3      	b.n	8001c34 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b5b      	ldr	r3, [pc, #364]	; (8001c3c <HAL_RCC_ClockConfig+0x184>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d911      	bls.n	8001afe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b58      	ldr	r3, [pc, #352]	; (8001c3c <HAL_RCC_ClockConfig+0x184>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	4b55      	ldr	r3, [pc, #340]	; (8001c3c <HAL_RCC_ClockConfig+0x184>)
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_ClockConfig+0x184>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e09a      	b.n	8001c34 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	d015      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d006      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b12:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001b18:	21e0      	movs	r1, #224	; 0xe0
 8001b1a:	00c9      	lsls	r1, r1, #3
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	22f0      	movs	r2, #240	; 0xf0
 8001b26:	4393      	bics	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001b30:	430a      	orrs	r2, r1
 8001b32:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d040      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	029b      	lsls	r3, r3, #10
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d114      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06e      	b.n	8001c34 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	049b      	lsls	r3, r3, #18
 8001b66:	4013      	ands	r3, r2
 8001b68:	d108      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e062      	b.n	8001c34 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2202      	movs	r2, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e05b      	b.n	8001c34 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7c:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2203      	movs	r2, #3
 8001b82:	4393      	bics	r3, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b90:	f7fe fba0 	bl	80002d4 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b98:	e009      	b.n	8001bae <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9a:	f7fe fb9b 	bl	80002d4 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <HAL_RCC_ClockConfig+0x18c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e042      	b.n	8001c34 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1ec      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCC_ClockConfig+0x184>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d211      	bcs.n	8001bf2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_RCC_ClockConfig+0x184>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4393      	bics	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_RCC_ClockConfig+0x184>)
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_RCC_ClockConfig+0x184>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e020      	b.n	8001c34 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d009      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_RCC_ClockConfig+0x190>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c10:	f000 f820 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001c14:	0001      	movs	r1, r0
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x188>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	4013      	ands	r3, r2
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_RCC_ClockConfig+0x194>)
 8001c22:	5cd3      	ldrb	r3, [r2, r3]
 8001c24:	000a      	movs	r2, r1
 8001c26:	40da      	lsrs	r2, r3
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_ClockConfig+0x198>)
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f7fe fb0b 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b004      	add	sp, #16
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	00001388 	.word	0x00001388
 8001c48:	fffff8ff 	.word	0xfffff8ff
 8001c4c:	08003e1c 	.word	0x08003e1c
 8001c50:	2000000c 	.word	0x2000000c

08001c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	220c      	movs	r2, #12
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x30>
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x36>
 8001c82:	e02c      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c86:	613b      	str	r3, [r7, #16]
      break;
 8001c88:	e02c      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	0c9b      	lsrs	r3, r3, #18
 8001c8e:	220f      	movs	r2, #15
 8001c90:	4013      	ands	r3, r2
 8001c92:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xa8>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	025b      	lsls	r3, r3, #9
 8001cac:	4013      	ands	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	4810      	ldr	r0, [pc, #64]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cb4:	f7fe fa28 	bl	8000108 <__udivsi3>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	001a      	movs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4353      	muls	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e009      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	000a      	movs	r2, r1
 8001cc8:	0152      	lsls	r2, r2, #5
 8001cca:	1a52      	subs	r2, r2, r1
 8001ccc:	0193      	lsls	r3, r2, #6
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	185b      	adds	r3, r3, r1
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
      break;
 8001cdc:	e002      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ce0:	613b      	str	r3, [r7, #16]
      break;
 8001ce2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ce4:	693b      	ldr	r3, [r7, #16]
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b006      	add	sp, #24
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	007a1200 	.word	0x007a1200
 8001cf8:	08003bfc 	.word	0x08003bfc
 8001cfc:	08003c0c 	.word	0x08003c0c

08001d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d04:	4b02      	ldr	r3, [pc, #8]	; (8001d10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	2000000c 	.word	0x2000000c

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d18:	f7ff fff2 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d1c:	0001      	movs	r1, r0
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	2207      	movs	r2, #7
 8001d26:	4013      	ands	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d2a:	5cd3      	ldrb	r3, [r2, r3]
 8001d2c:	40d9      	lsrs	r1, r3
 8001d2e:	000b      	movs	r3, r1
}    
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08003e2c 	.word	0x08003e2c

08001d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	025b      	lsls	r3, r3, #9
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d5c:	e08e      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d5e:	2017      	movs	r0, #23
 8001d60:	183b      	adds	r3, r7, r0
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	055b      	lsls	r3, r3, #21
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d110      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b54      	ldr	r3, [pc, #336]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	0549      	lsls	r1, r1, #21
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	61da      	str	r2, [r3, #28]
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d82:	69da      	ldr	r2, [r3, #28]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	055b      	lsls	r3, r3, #21
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8e:	183b      	adds	r3, r7, r0
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d11a      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da0:	4b49      	ldr	r3, [pc, #292]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	0049      	lsls	r1, r1, #1
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7fe fa91 	bl	80002d4 <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	e008      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db8:	f7fe fa8c 	bl	80002d4 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e077      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	4b3f      	ldr	r3, [pc, #252]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dd8:	6a1a      	ldr	r2, [r3, #32]
 8001dda:	23c0      	movs	r3, #192	; 0xc0
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d034      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	23c0      	movs	r3, #192	; 0xc0
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4013      	ands	r3, r2
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d02c      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001df8:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a33      	ldr	r2, [pc, #204]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e02:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e04:	6a1a      	ldr	r2, [r3, #32]
 8001e06:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	0249      	lsls	r1, r1, #9
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e12:	6a1a      	ldr	r2, [r3, #32]
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e16:	492e      	ldr	r1, [pc, #184]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e1c:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	4013      	ands	r3, r2
 8001e28:	d013      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7fe fa53 	bl	80002d4 <HAL_GetTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	e009      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7fe fa4e 	bl	80002d4 <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	4a25      	ldr	r2, [pc, #148]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e038      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e52:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e66:	2317      	movs	r3, #23
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e76:	4918      	ldr	r1, [pc, #96]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e78:	400a      	ands	r2, r1
 8001e7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2201      	movs	r2, #1
 8001e82:	4013      	ands	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e96:	430a      	orrs	r2, r1
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	4393      	bics	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b006      	add	sp, #24
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	fffffcff 	.word	0xfffffcff
 8001ed0:	fffeffff 	.word	0xfffeffff
 8001ed4:	00001388 	.word	0x00001388
 8001ed8:	efffffff 	.word	0xefffffff

08001edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ee4:	231e      	movs	r3, #30
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a8d      	ldr	r2, [pc, #564]	; (8002140 <UART_SetConfig+0x264>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4a88      	ldr	r2, [pc, #544]	; (8002144 <UART_SetConfig+0x268>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a7f      	ldr	r2, [pc, #508]	; (8002148 <UART_SetConfig+0x26c>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a7b      	ldr	r2, [pc, #492]	; (800214c <UART_SetConfig+0x270>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d127      	bne.n	8001fb2 <UART_SetConfig+0xd6>
 8001f62:	4b7b      	ldr	r3, [pc, #492]	; (8002150 <UART_SetConfig+0x274>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	2203      	movs	r2, #3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d00d      	beq.n	8001f8a <UART_SetConfig+0xae>
 8001f6e:	d81b      	bhi.n	8001fa8 <UART_SetConfig+0xcc>
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d014      	beq.n	8001f9e <UART_SetConfig+0xc2>
 8001f74:	d818      	bhi.n	8001fa8 <UART_SetConfig+0xcc>
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <UART_SetConfig+0xa4>
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d00a      	beq.n	8001f94 <UART_SetConfig+0xb8>
 8001f7e:	e013      	b.n	8001fa8 <UART_SetConfig+0xcc>
 8001f80:	231f      	movs	r3, #31
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e021      	b.n	8001fce <UART_SetConfig+0xf2>
 8001f8a:	231f      	movs	r3, #31
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	2202      	movs	r2, #2
 8001f90:	701a      	strb	r2, [r3, #0]
 8001f92:	e01c      	b.n	8001fce <UART_SetConfig+0xf2>
 8001f94:	231f      	movs	r3, #31
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2204      	movs	r2, #4
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e017      	b.n	8001fce <UART_SetConfig+0xf2>
 8001f9e:	231f      	movs	r3, #31
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e012      	b.n	8001fce <UART_SetConfig+0xf2>
 8001fa8:	231f      	movs	r3, #31
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	2210      	movs	r2, #16
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	e00d      	b.n	8001fce <UART_SetConfig+0xf2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a67      	ldr	r2, [pc, #412]	; (8002154 <UART_SetConfig+0x278>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d104      	bne.n	8001fc6 <UART_SetConfig+0xea>
 8001fbc:	231f      	movs	r3, #31
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e003      	b.n	8001fce <UART_SetConfig+0xf2>
 8001fc6:	231f      	movs	r3, #31
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	2210      	movs	r2, #16
 8001fcc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d15c      	bne.n	8002094 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8001fda:	231f      	movs	r3, #31
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d015      	beq.n	8002010 <UART_SetConfig+0x134>
 8001fe4:	dc18      	bgt.n	8002018 <UART_SetConfig+0x13c>
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d00d      	beq.n	8002006 <UART_SetConfig+0x12a>
 8001fea:	dc15      	bgt.n	8002018 <UART_SetConfig+0x13c>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <UART_SetConfig+0x11a>
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d005      	beq.n	8002000 <UART_SetConfig+0x124>
 8001ff4:	e010      	b.n	8002018 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ff6:	f7ff fe8d 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	61bb      	str	r3, [r7, #24]
        break;
 8001ffe:	e012      	b.n	8002026 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002000:	4b55      	ldr	r3, [pc, #340]	; (8002158 <UART_SetConfig+0x27c>)
 8002002:	61bb      	str	r3, [r7, #24]
        break;
 8002004:	e00f      	b.n	8002026 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002006:	f7ff fe25 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 800200a:	0003      	movs	r3, r0
 800200c:	61bb      	str	r3, [r7, #24]
        break;
 800200e:	e00a      	b.n	8002026 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	61bb      	str	r3, [r7, #24]
        break;
 8002016:	e006      	b.n	8002026 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800201c:	231e      	movs	r3, #30
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
        break;
 8002024:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d100      	bne.n	800202e <UART_SetConfig+0x152>
 800202c:	e07a      	b.n	8002124 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	005a      	lsls	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	18d2      	adds	r2, r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0019      	movs	r1, r3
 8002040:	0010      	movs	r0, r2
 8002042:	f7fe f861 	bl	8000108 <__udivsi3>
 8002046:	0003      	movs	r3, r0
 8002048:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b0f      	cmp	r3, #15
 800204e:	d91c      	bls.n	800208a <UART_SetConfig+0x1ae>
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	025b      	lsls	r3, r3, #9
 8002056:	429a      	cmp	r2, r3
 8002058:	d217      	bcs.n	800208a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	b29a      	uxth	r2, r3
 800205e:	200e      	movs	r0, #14
 8002060:	183b      	adds	r3, r7, r0
 8002062:	210f      	movs	r1, #15
 8002064:	438a      	bics	r2, r1
 8002066:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	b29b      	uxth	r3, r3
 800206e:	2207      	movs	r2, #7
 8002070:	4013      	ands	r3, r2
 8002072:	b299      	uxth	r1, r3
 8002074:	183b      	adds	r3, r7, r0
 8002076:	183a      	adds	r2, r7, r0
 8002078:	8812      	ldrh	r2, [r2, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	183a      	adds	r2, r7, r0
 8002084:	8812      	ldrh	r2, [r2, #0]
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	e04c      	b.n	8002124 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800208a:	231e      	movs	r3, #30
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	e047      	b.n	8002124 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002094:	231f      	movs	r3, #31
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b08      	cmp	r3, #8
 800209c:	d015      	beq.n	80020ca <UART_SetConfig+0x1ee>
 800209e:	dc18      	bgt.n	80020d2 <UART_SetConfig+0x1f6>
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d00d      	beq.n	80020c0 <UART_SetConfig+0x1e4>
 80020a4:	dc15      	bgt.n	80020d2 <UART_SetConfig+0x1f6>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <UART_SetConfig+0x1d4>
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d005      	beq.n	80020ba <UART_SetConfig+0x1de>
 80020ae:	e010      	b.n	80020d2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020b0:	f7ff fe30 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80020b4:	0003      	movs	r3, r0
 80020b6:	61bb      	str	r3, [r7, #24]
        break;
 80020b8:	e012      	b.n	80020e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020ba:	4b27      	ldr	r3, [pc, #156]	; (8002158 <UART_SetConfig+0x27c>)
 80020bc:	61bb      	str	r3, [r7, #24]
        break;
 80020be:	e00f      	b.n	80020e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020c0:	f7ff fdc8 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 80020c4:	0003      	movs	r3, r0
 80020c6:	61bb      	str	r3, [r7, #24]
        break;
 80020c8:	e00a      	b.n	80020e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	61bb      	str	r3, [r7, #24]
        break;
 80020d0:	e006      	b.n	80020e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80020d6:	231e      	movs	r3, #30
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
        break;
 80020de:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d01e      	beq.n	8002124 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	085a      	lsrs	r2, r3, #1
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	18d2      	adds	r2, r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	0019      	movs	r1, r3
 80020f6:	0010      	movs	r0, r2
 80020f8:	f7fe f806 	bl	8000108 <__udivsi3>
 80020fc:	0003      	movs	r3, r0
 80020fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b0f      	cmp	r3, #15
 8002104:	d90a      	bls.n	800211c <UART_SetConfig+0x240>
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	025b      	lsls	r3, r3, #9
 800210c:	429a      	cmp	r2, r3
 800210e:	d205      	bcs.n	800211c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	e003      	b.n	8002124 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800211c:	231e      	movs	r3, #30
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002130:	231e      	movs	r3, #30
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	781b      	ldrb	r3, [r3, #0]
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b008      	add	sp, #32
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	ffff69f3 	.word	0xffff69f3
 8002144:	ffffcfff 	.word	0xffffcfff
 8002148:	fffff4ff 	.word	0xfffff4ff
 800214c:	40013800 	.word	0x40013800
 8002150:	40021000 	.word	0x40021000
 8002154:	40004400 	.word	0x40004400
 8002158:	007a1200 	.word	0x007a1200

0800215c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	2201      	movs	r2, #1
 800216a:	4013      	ands	r3, r2
 800216c:	d00b      	beq.n	8002186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a4a      	ldr	r2, [pc, #296]	; (80022a0 <UART_AdvFeatureConfig+0x144>)
 8002176:	4013      	ands	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d00b      	beq.n	80021a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a43      	ldr	r2, [pc, #268]	; (80022a4 <UART_AdvFeatureConfig+0x148>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	2204      	movs	r2, #4
 80021ae:	4013      	ands	r3, r2
 80021b0:	d00b      	beq.n	80021ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <UART_AdvFeatureConfig+0x14c>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	2208      	movs	r2, #8
 80021d0:	4013      	ands	r3, r2
 80021d2:	d00b      	beq.n	80021ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a34      	ldr	r2, [pc, #208]	; (80022ac <UART_AdvFeatureConfig+0x150>)
 80021dc:	4013      	ands	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	2210      	movs	r2, #16
 80021f2:	4013      	ands	r3, r2
 80021f4:	d00b      	beq.n	800220e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <UART_AdvFeatureConfig+0x154>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	2220      	movs	r2, #32
 8002214:	4013      	ands	r3, r2
 8002216:	d00b      	beq.n	8002230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <UART_AdvFeatureConfig+0x158>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2240      	movs	r2, #64	; 0x40
 8002236:	4013      	ands	r3, r2
 8002238:	d01d      	beq.n	8002276 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <UART_AdvFeatureConfig+0x15c>)
 8002242:	4013      	ands	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	035b      	lsls	r3, r3, #13
 800225a:	429a      	cmp	r2, r3
 800225c:	d10b      	bne.n	8002276 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a15      	ldr	r2, [pc, #84]	; (80022bc <UART_AdvFeatureConfig+0x160>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	4013      	ands	r3, r2
 800227e:	d00b      	beq.n	8002298 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <UART_AdvFeatureConfig+0x164>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	605a      	str	r2, [r3, #4]
  }
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	fffdffff 	.word	0xfffdffff
 80022a4:	fffeffff 	.word	0xfffeffff
 80022a8:	fffbffff 	.word	0xfffbffff
 80022ac:	ffff7fff 	.word	0xffff7fff
 80022b0:	ffffefff 	.word	0xffffefff
 80022b4:	ffffdfff 	.word	0xffffdfff
 80022b8:	ffefffff 	.word	0xffefffff
 80022bc:	ff9fffff 	.word	0xff9fffff
 80022c0:	fff7ffff 	.word	0xfff7ffff

080022c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b092      	sub	sp, #72	; 0x48
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2284      	movs	r2, #132	; 0x84
 80022d0:	2100      	movs	r1, #0
 80022d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80022d4:	f7fd fffe 	bl	80002d4 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2208      	movs	r2, #8
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d12c      	bne.n	8002344 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	0391      	lsls	r1, r2, #14
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4a46      	ldr	r2, [pc, #280]	; (800240c <UART_CheckIdleState+0x148>)
 80022f4:	9200      	str	r2, [sp, #0]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f000 f88c 	bl	8002414 <UART_WaitOnFlagUntilTimeout>
 80022fc:	1e03      	subs	r3, r0, #0
 80022fe:	d021      	beq.n	8002344 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002300:	f3ef 8310 	mrs	r3, PRIMASK
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
 800230a:	2301      	movs	r3, #1
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	f383 8810 	msr	PRIMASK, r3
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	438a      	bics	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	f383 8810 	msr	PRIMASK, r3
}
 8002330:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2278      	movs	r2, #120	; 0x78
 800233c:	2100      	movs	r1, #0
 800233e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e05f      	b.n	8002404 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2204      	movs	r2, #4
 800234c:	4013      	ands	r3, r2
 800234e:	2b04      	cmp	r3, #4
 8002350:	d146      	bne.n	80023e0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002354:	2280      	movs	r2, #128	; 0x80
 8002356:	03d1      	lsls	r1, r2, #15
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4a2c      	ldr	r2, [pc, #176]	; (800240c <UART_CheckIdleState+0x148>)
 800235c:	9200      	str	r2, [sp, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	f000 f858 	bl	8002414 <UART_WaitOnFlagUntilTimeout>
 8002364:	1e03      	subs	r3, r0, #0
 8002366:	d03b      	beq.n	80023e0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002368:	f3ef 8310 	mrs	r3, PRIMASK
 800236c:	60fb      	str	r3, [r7, #12]
  return(result);
 800236e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002370:	637b      	str	r3, [r7, #52]	; 0x34
 8002372:	2301      	movs	r3, #1
 8002374:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f383 8810 	msr	PRIMASK, r3
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4921      	ldr	r1, [pc, #132]	; (8002410 <UART_CheckIdleState+0x14c>)
 800238a:	400a      	ands	r2, r1
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002390:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f383 8810 	msr	PRIMASK, r3
}
 8002398:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800239a:	f3ef 8310 	mrs	r3, PRIMASK
 800239e:	61bb      	str	r3, [r7, #24]
  return(result);
 80023a0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
 80023a4:	2301      	movs	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f383 8810 	msr	PRIMASK, r3
}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2101      	movs	r1, #1
 80023bc:	438a      	bics	r2, r1
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	f383 8810 	msr	PRIMASK, r3
}
 80023ca:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	2120      	movs	r1, #32
 80023d2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2278      	movs	r2, #120	; 0x78
 80023d8:	2100      	movs	r1, #0
 80023da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e011      	b.n	8002404 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2280      	movs	r2, #128	; 0x80
 80023ea:	2120      	movs	r1, #32
 80023ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2278      	movs	r2, #120	; 0x78
 80023fe:	2100      	movs	r1, #0
 8002400:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b010      	add	sp, #64	; 0x40
 800240a:	bd80      	pop	{r7, pc}
 800240c:	01ffffff 	.word	0x01ffffff
 8002410:	fffffedf 	.word	0xfffffedf

08002414 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	1dfb      	adds	r3, r7, #7
 8002422:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002424:	e04b      	b.n	80024be <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	3301      	adds	r3, #1
 800242a:	d048      	beq.n	80024be <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7fd ff52 	bl	80002d4 <HAL_GetTick>
 8002430:	0002      	movs	r2, r0
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	429a      	cmp	r2, r3
 800243a:	d302      	bcc.n	8002442 <UART_WaitOnFlagUntilTimeout+0x2e>
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e04b      	b.n	80024de <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2204      	movs	r2, #4
 800244e:	4013      	ands	r3, r2
 8002450:	d035      	beq.n	80024be <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2208      	movs	r2, #8
 800245a:	4013      	ands	r3, r2
 800245c:	2b08      	cmp	r3, #8
 800245e:	d111      	bne.n	8002484 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2208      	movs	r2, #8
 8002466:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	0018      	movs	r0, r3
 800246c:	f000 f83c 	bl	80024e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2284      	movs	r2, #132	; 0x84
 8002474:	2108      	movs	r1, #8
 8002476:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2278      	movs	r2, #120	; 0x78
 800247c:	2100      	movs	r1, #0
 800247e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e02c      	b.n	80024de <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	401a      	ands	r2, r3
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	429a      	cmp	r2, r3
 8002496:	d112      	bne.n	80024be <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2280      	movs	r2, #128	; 0x80
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 f81f 	bl	80024e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2284      	movs	r2, #132	; 0x84
 80024ae:	2120      	movs	r1, #32
 80024b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2278      	movs	r2, #120	; 0x78
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e00f      	b.n	80024de <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	4013      	ands	r3, r2
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	425a      	negs	r2, r3
 80024ce:	4153      	adcs	r3, r2
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	001a      	movs	r2, r3
 80024d4:	1dfb      	adds	r3, r7, #7
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d0a4      	beq.n	8002426 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b004      	add	sp, #16
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08e      	sub	sp, #56	; 0x38
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024f0:	f3ef 8310 	mrs	r3, PRIMASK
 80024f4:	617b      	str	r3, [r7, #20]
  return(result);
 80024f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
 80024fa:	2301      	movs	r3, #1
 80024fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f383 8810 	msr	PRIMASK, r3
}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4926      	ldr	r1, [pc, #152]	; (80025ac <UART_EndRxTransfer+0xc4>)
 8002512:	400a      	ands	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f383 8810 	msr	PRIMASK, r3
}
 8002520:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002522:	f3ef 8310 	mrs	r3, PRIMASK
 8002526:	623b      	str	r3, [r7, #32]
  return(result);
 8002528:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
 800252c:	2301      	movs	r3, #1
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	f383 8810 	msr	PRIMASK, r3
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	438a      	bics	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	f383 8810 	msr	PRIMASK, r3
}
 8002552:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002558:	2b01      	cmp	r3, #1
 800255a:	d118      	bne.n	800258e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800255c:	f3ef 8310 	mrs	r3, PRIMASK
 8002560:	60bb      	str	r3, [r7, #8]
  return(result);
 8002562:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002566:	2301      	movs	r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f383 8810 	msr	PRIMASK, r3
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2110      	movs	r1, #16
 800257e:	438a      	bics	r2, r1
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f383 8810 	msr	PRIMASK, r3
}
 800258c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	2120      	movs	r1, #32
 8002594:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b00e      	add	sp, #56	; 0x38
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	fffffedf 	.word	0xfffffedf

080025b0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e05b      	b.n	8002680 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2278      	movs	r2, #120	; 0x78
 80025d4:	2100      	movs	r1, #0
 80025d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	0018      	movs	r0, r3
 80025dc:	f001 f9da 	bl	8003994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2224      	movs	r2, #36	; 0x24
 80025e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	438a      	bics	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff fc6f 	bl	8001edc <UART_SetConfig>
 80025fe:	0003      	movs	r3, r0
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e03b      	b.n	8002680 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	0018      	movs	r0, r3
 8002614:	f7ff fda2 	bl	800215c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	01c9      	lsls	r1, r1, #7
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a15      	ldr	r2, [pc, #84]	; (8002688 <HAL_RS485Ex_Init+0xd8>)
 8002632:	4013      	ands	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	430a      	orrs	r2, r1
 800263e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	055b      	lsls	r3, r3, #21
 8002644:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0d      	ldr	r2, [pc, #52]	; (800268c <HAL_RS485Ex_Init+0xdc>)
 8002658:	4013      	ands	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	0018      	movs	r0, r3
 800267a:	f7ff fe23 	bl	80022c4 <UART_CheckIdleState>
 800267e:	0003      	movs	r3, r0
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b006      	add	sp, #24
 8002686:	bd80      	pop	{r7, pc}
 8002688:	ffff7fff 	.word	0xffff7fff
 800268c:	fc00ffff 	.word	0xfc00ffff

08002690 <MakeCCITT16>:
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};

uint16_t MakeCCITT16(uint8_t *data, uint32_t len)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint16_t crc = 0;
 800269a:	230a      	movs	r3, #10
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2200      	movs	r2, #0
 80026a0:	801a      	strh	r2, [r3, #0]
	
	for(i=0; i<len; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e01b      	b.n	80026e0 <MakeCCITT16+0x50>
		crc = CrcCcittTable[((crc >> 8) ^ *data++) & 0xff] ^ (crc << 8);
 80026a8:	200a      	movs	r0, #10
 80026aa:	183b      	adds	r3, r7, r0
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	0019      	movs	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	404b      	eors	r3, r1
 80026be:	22ff      	movs	r2, #255	; 0xff
 80026c0:	401a      	ands	r2, r3
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <MakeCCITT16+0x68>)
 80026c4:	0052      	lsls	r2, r2, #1
 80026c6:	5ad3      	ldrh	r3, [r2, r3]
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	183b      	adds	r3, r7, r0
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	4053      	eors	r3, r2
 80026d4:	b21a      	sxth	r2, r3
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	801a      	strh	r2, [r3, #0]
	for(i=0; i<len; i++)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3301      	adds	r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d3df      	bcc.n	80026a8 <MakeCCITT16+0x18>
	return crc;
 80026e8:	230a      	movs	r3, #10
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	881b      	ldrh	r3, [r3, #0]
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b004      	add	sp, #16
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	08003c1c 	.word	0x08003c1c

080026fc <crc_modbus>:
uint16_t	crc_tab16[256];

void init_crc16_tab(void);
//================================================================
uint16_t crc_modbus(uint8_t *input_str, uint16_t num_bytes) 
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	000a      	movs	r2, r1
 8002706:	1cbb      	adds	r3, r7, #2
 8002708:	801a      	strh	r2, [r3, #0]
	uint16_t i, crc;
	uint8_t *ptr;

	if(!crc_tab16_init) 
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <crc_modbus+0x90>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2201      	movs	r2, #1
 8002710:	4053      	eors	r3, r2
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <crc_modbus+0x20>
		init_crc16_tab();
 8002718:	f000 f83c 	bl	8002794 <init_crc16_tab>

	crc = CRC_START_MODBUS;
 800271c:	230c      	movs	r3, #12
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2201      	movs	r2, #1
 8002722:	4252      	negs	r2, r2
 8002724:	801a      	strh	r2, [r3, #0]
	ptr = input_str;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60bb      	str	r3, [r7, #8]

	if (ptr != NULL) 
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d025      	beq.n	800277c <crc_modbus+0x80>
	{
		for(i=0; i<num_bytes; i++) 
 8002730:	230e      	movs	r3, #14
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	2200      	movs	r2, #0
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	e019      	b.n	800276e <crc_modbus+0x72>
		{
			crc = (crc >> 8) ^ crc_tab16[ (crc ^ (uint16_t) *ptr++) & 0x00FF ];
 800273a:	240c      	movs	r4, #12
 800273c:	193b      	adds	r3, r7, r4
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	b299      	uxth	r1, r3
 8002744:	193b      	adds	r3, r7, r4
 8002746:	881a      	ldrh	r2, [r3, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	1c58      	adds	r0, r3, #1
 800274c:	60b8      	str	r0, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4053      	eors	r3, r2
 8002752:	22ff      	movs	r2, #255	; 0xff
 8002754:	401a      	ands	r2, r3
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <crc_modbus+0x94>)
 8002758:	0052      	lsls	r2, r2, #1
 800275a:	5ad2      	ldrh	r2, [r2, r3]
 800275c:	193b      	adds	r3, r7, r4
 800275e:	404a      	eors	r2, r1
 8002760:	801a      	strh	r2, [r3, #0]
		for(i=0; i<num_bytes; i++) 
 8002762:	210e      	movs	r1, #14
 8002764:	187b      	adds	r3, r7, r1
 8002766:	881a      	ldrh	r2, [r3, #0]
 8002768:	187b      	adds	r3, r7, r1
 800276a:	3201      	adds	r2, #1
 800276c:	801a      	strh	r2, [r3, #0]
 800276e:	230e      	movs	r3, #14
 8002770:	18fa      	adds	r2, r7, r3
 8002772:	1cbb      	adds	r3, r7, #2
 8002774:	8812      	ldrh	r2, [r2, #0]
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d3de      	bcc.n	800273a <crc_modbus+0x3e>
		}
	}
	
	return crc;
 800277c:	230c      	movs	r3, #12
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	881b      	ldrh	r3, [r3, #0]

}  /* crc_modbus */
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b005      	add	sp, #20
 8002788:	bd90      	pop	{r4, r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	20000030 	.word	0x20000030
 8002790:	20000034 	.word	0x20000034

08002794 <init_crc16_tab>:
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

void init_crc16_tab(void) 
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for(i=0; i<256; i++) 
 800279a:	1dbb      	adds	r3, r7, #6
 800279c:	2200      	movs	r2, #0
 800279e:	801a      	strh	r2, [r3, #0]
 80027a0:	e03c      	b.n	800281c <init_crc16_tab+0x88>
	{
		crc = 0;
 80027a2:	1cbb      	adds	r3, r7, #2
 80027a4:	2200      	movs	r2, #0
 80027a6:	801a      	strh	r2, [r3, #0]
		c   = i;
 80027a8:	003b      	movs	r3, r7
 80027aa:	1dba      	adds	r2, r7, #6
 80027ac:	8812      	ldrh	r2, [r2, #0]
 80027ae:	801a      	strh	r2, [r3, #0]

		for(j=0; j<8; j++) 
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	2200      	movs	r2, #0
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	e021      	b.n	80027fc <init_crc16_tab+0x68>
		{
			if((crc ^ c) & 0x0001) 
 80027b8:	1cba      	adds	r2, r7, #2
 80027ba:	003b      	movs	r3, r7
 80027bc:	8812      	ldrh	r2, [r2, #0]
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	4053      	eors	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	001a      	movs	r2, r3
 80027c6:	2301      	movs	r3, #1
 80027c8:	4013      	ands	r3, r2
 80027ca:	d008      	beq.n	80027de <init_crc16_tab+0x4a>
				crc = (crc >> 1) ^ CRC_POLY_16;
 80027cc:	1cbb      	adds	r3, r7, #2
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	1cbb      	adds	r3, r7, #2
 80027d6:	4917      	ldr	r1, [pc, #92]	; (8002834 <init_crc16_tab+0xa0>)
 80027d8:	404a      	eors	r2, r1
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	e004      	b.n	80027e8 <init_crc16_tab+0x54>
			else                      
				crc = crc >> 1;
 80027de:	1cbb      	adds	r3, r7, #2
 80027e0:	1cba      	adds	r2, r7, #2
 80027e2:	8812      	ldrh	r2, [r2, #0]
 80027e4:	0852      	lsrs	r2, r2, #1
 80027e6:	801a      	strh	r2, [r3, #0]

			c = c >> 1;
 80027e8:	003b      	movs	r3, r7
 80027ea:	003a      	movs	r2, r7
 80027ec:	8812      	ldrh	r2, [r2, #0]
 80027ee:	0852      	lsrs	r2, r2, #1
 80027f0:	801a      	strh	r2, [r3, #0]
		for(j=0; j<8; j++) 
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	3201      	adds	r2, #1
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	2b07      	cmp	r3, #7
 8002802:	d9d9      	bls.n	80027b8 <init_crc16_tab+0x24>
		}

		crc_tab16[i] = crc;
 8002804:	1dbb      	adds	r3, r7, #6
 8002806:	881a      	ldrh	r2, [r3, #0]
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <init_crc16_tab+0xa4>)
 800280a:	0052      	lsls	r2, r2, #1
 800280c:	1cb9      	adds	r1, r7, #2
 800280e:	8809      	ldrh	r1, [r1, #0]
 8002810:	52d1      	strh	r1, [r2, r3]
	for(i=0; i<256; i++) 
 8002812:	1dbb      	adds	r3, r7, #6
 8002814:	881a      	ldrh	r2, [r3, #0]
 8002816:	1dbb      	adds	r3, r7, #6
 8002818:	3201      	adds	r2, #1
 800281a:	801a      	strh	r2, [r3, #0]
 800281c:	1dbb      	adds	r3, r7, #6
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	2bff      	cmp	r3, #255	; 0xff
 8002822:	d9be      	bls.n	80027a2 <init_crc16_tab+0xe>
	}

	crc_tab16_init = 1;
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <init_crc16_tab+0xa8>)
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b002      	add	sp, #8
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	ffffa001 	.word	0xffffa001
 8002838:	20000034 	.word	0x20000034
 800283c:	20000030 	.word	0x20000030

08002840 <MyTimer_Handler>:

volatile uint32_t millis_count = 0;

//===================================================================
void MyTimer_Handler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
	callback_1ms++;
 8002844:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <MyTimer_Handler+0x94>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	3301      	adds	r3, #1
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <MyTimer_Handler+0x94>)
 800284e:	701a      	strb	r2, [r3, #0]
	millis_count++;
 8002850:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <MyTimer_Handler+0x98>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <MyTimer_Handler+0x98>)
 8002858:	601a      	str	r2, [r3, #0]

	if(callback_1ms >= 10)
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <MyTimer_Handler+0x94>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b09      	cmp	r3, #9
 8002860:	d908      	bls.n	8002874 <MyTimer_Handler+0x34>
	{
		callback_1ms = 0;
 8002862:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <MyTimer_Handler+0x94>)
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
		callback_10ms++;
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <MyTimer_Handler+0x9c>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <MyTimer_Handler+0x9c>)
 8002872:	701a      	strb	r2, [r3, #0]

	}

	if(urx1_tout)					// For RS485
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <MyTimer_Handler+0xa0>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00c      	beq.n	8002896 <MyTimer_Handler+0x56>
	{
		urx1_tout--;
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <MyTimer_Handler+0xa0>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <MyTimer_Handler+0xa0>)
 8002886:	801a      	strh	r2, [r3, #0]
		if(urx1_tout == 0)
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <MyTimer_Handler+0xa0>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <MyTimer_Handler+0x56>
			urx1_comp = 1;
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <MyTimer_Handler+0xa4>)
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
	}


	if(urx2_tout)
 8002896:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <MyTimer_Handler+0xa8>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <MyTimer_Handler+0x78>
	{
		urx2_tout--;
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <MyTimer_Handler+0xa8>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <MyTimer_Handler+0xa8>)
 80028a8:	801a      	strh	r2, [r3, #0]
		if(urx2_tout == 0)
 80028aa:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <MyTimer_Handler+0xa8>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <MyTimer_Handler+0x78>
			urx2_comp = 1;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <MyTimer_Handler+0xac>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
	}
    if(gsen2_timeout)
 80028b8:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <MyTimer_Handler+0xb0>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <MyTimer_Handler+0x8c>
    	gsen2_timeout--;
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <MyTimer_Handler+0xb0>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <MyTimer_Handler+0xb0>)
 80028ca:	801a      	strh	r2, [r3, #0]
	
}
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	20000234 	.word	0x20000234
 80028d8:	2000023c 	.word	0x2000023c
 80028dc:	20000235 	.word	0x20000235
 80028e0:	200002aa 	.word	0x200002aa
 80028e4:	20000241 	.word	0x20000241
 80028e8:	200006b6 	.word	0x200006b6
 80028ec:	200002ae 	.word	0x200002ae
 80028f0:	200006d2 	.word	0x200006d2

080028f4 <Timer_Proc>:

void Timer_Proc(void)     
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
    if(callback_10ms >= 10)			// Every 100ms
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <Timer_Proc+0x80>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b09      	cmp	r3, #9
 80028fe:	d91a      	bls.n	8002936 <Timer_Proc+0x42>
    {
        callback_10ms = 0;
 8002900:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <Timer_Proc+0x80>)
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
        callback_100ms++;
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <Timer_Proc+0x84>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <Timer_Proc+0x84>)
 8002910:	701a      	strb	r2, [r3, #0]
		callback_300ms++;
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <Timer_Proc+0x88>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b18      	ldr	r3, [pc, #96]	; (800297c <Timer_Proc+0x88>)
 800291c:	701a      	strb	r2, [r3, #0]
        callback_500ms++;
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <Timer_Proc+0x8c>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	3301      	adds	r3, #1
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <Timer_Proc+0x8c>)
 8002928:	701a      	strb	r2, [r3, #0]
	
		sync_gsen2= 1;
 800292a:	4b16      	ldr	r3, [pc, #88]	; (8002984 <Timer_Proc+0x90>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
		run_gsen2= 1;
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <Timer_Proc+0x94>)
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
		
    }

	if(callback_300ms == 3)
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <Timer_Proc+0x88>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d102      	bne.n	8002944 <Timer_Proc+0x50>
	{
		callback_300ms = 0;
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <Timer_Proc+0x88>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
//		flg_485_send = 1;

	}
	
    if(callback_500ms == 5)      // 0.5SEC
 8002944:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <Timer_Proc+0x8c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b05      	cmp	r3, #5
 800294a:	d102      	bne.n	8002952 <Timer_Proc+0x5e>
    {
        callback_500ms = 0;
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <Timer_Proc+0x8c>)
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]

    }

    if(callback_100ms == 10)      // 1SEC
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <Timer_Proc+0x84>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b0a      	cmp	r3, #10
 8002958:	d102      	bne.n	8002960 <Timer_Proc+0x6c>
    {
    	callback_100ms = 0;
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <Timer_Proc+0x84>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]

	}

    if(callback_1min >= 60)   // 1Min
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <Timer_Proc+0x98>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b3b      	cmp	r3, #59	; 0x3b
 8002966:	d902      	bls.n	800296e <Timer_Proc+0x7a>
    {
        callback_1min = 0;
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <Timer_Proc+0x98>)
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
		
		
    }
}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000235 	.word	0x20000235
 8002978:	20000236 	.word	0x20000236
 800297c:	20000237 	.word	0x20000237
 8002980:	20000238 	.word	0x20000238
 8002984:	200002ac 	.word	0x200002ac
 8002988:	200002ad 	.word	0x200002ad
 800298c:	20000239 	.word	0x20000239

08002990 <USART1_IRQ_Function>:
extern uint8_t flg_do_out1;
extern uint8_t do_out2;

//==========================================================================================================
void USART1_IRQ_Function(void)				// For debug 485
{	
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
	uint8_t data_char;
	
	uint32_t isrflags   = READ_REG(USART1->ISR);
 8002996:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <USART1_IRQ_Function+0x120>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(USART1->CR1);
 800299c:	4b44      	ldr	r3, [pc, #272]	; (8002ab0 <USART1_IRQ_Function+0x120>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	613b      	str	r3, [r7, #16]
	uint32_t cr3its     = READ_REG(USART1->CR3);
 80029a2:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <USART1_IRQ_Function+0x120>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	60fb      	str	r3, [r7, #12]

	uint32_t errorflags;

	/* If no error occurs */
	errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	4a42      	ldr	r2, [pc, #264]	; (8002ab4 <USART1_IRQ_Function+0x124>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
	if (errorflags == 0U)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d000      	beq.n	80029b8 <USART1_IRQ_Function+0x28>
 80029b6:	e072      	b.n	8002a9e <USART1_IRQ_Function+0x10e>
	{
		/* UART in mode Receiver ---------------------------------------------------*/
		if (((isrflags & USART_ISR_RXNE) != 0U) && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2220      	movs	r2, #32
 80029bc:	4013      	ands	r3, r2
 80029be:	d021      	beq.n	8002a04 <USART1_IRQ_Function+0x74>
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2220      	movs	r2, #32
 80029c4:	4013      	ands	r3, r2
 80029c6:	d01d      	beq.n	8002a04 <USART1_IRQ_Function+0x74>
		{
			data_char = USART1->RDR & 0x00FF;
 80029c8:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <USART1_IRQ_Function+0x120>)
 80029ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	1dfb      	adds	r3, r7, #7
 80029d0:	701a      	strb	r2, [r3, #0]
		
			if((!urx1_comp) && (urx1_count < URX1_LEN))
 80029d2:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <USART1_IRQ_Function+0x128>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4053      	eors	r3, r2
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d011      	beq.n	8002a04 <USART1_IRQ_Function+0x74>
 80029e0:	4b36      	ldr	r3, [pc, #216]	; (8002abc <USART1_IRQ_Function+0x12c>)
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	2b1f      	cmp	r3, #31
 80029e6:	d80d      	bhi.n	8002a04 <USART1_IRQ_Function+0x74>
			{
				urx1_buf[urx1_count++] = data_char;
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <USART1_IRQ_Function+0x12c>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	b291      	uxth	r1, r2
 80029f0:	4a32      	ldr	r2, [pc, #200]	; (8002abc <USART1_IRQ_Function+0x12c>)
 80029f2:	8011      	strh	r1, [r2, #0]
 80029f4:	0019      	movs	r1, r3
 80029f6:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <USART1_IRQ_Function+0x130>)
 80029f8:	1dfa      	adds	r2, r7, #7
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	545a      	strb	r2, [r3, r1]
				urx1_tout = 10;
 80029fe:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <USART1_IRQ_Function+0x134>)
 8002a00:	220a      	movs	r2, #10
 8002a02:	801a      	strh	r2, [r3, #0]
			}
		}
		
		// Transmission
		if (((isrflags & USART_ISR_TXE) != 0U) && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d031      	beq.n	8002a70 <USART1_IRQ_Function+0xe0>
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	4013      	ands	r3, r2
 8002a12:	d02d      	beq.n	8002a70 <USART1_IRQ_Function+0xe0>
		{
			if(p1_out != p1_in) 							
 8002a14:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <USART1_IRQ_Function+0x138>)
 8002a16:	881a      	ldrh	r2, [r3, #0]
 8002a18:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <USART1_IRQ_Function+0x13c>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d018      	beq.n	8002a52 <USART1_IRQ_Function+0xc2>
			{
				USART1->TDR = utx1_buf[p1_out];
 8002a20:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <USART1_IRQ_Function+0x138>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	001a      	movs	r2, r3
 8002a26:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <USART1_IRQ_Function+0x140>)
 8002a28:	5c9a      	ldrb	r2, [r3, r2]
 8002a2a:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <USART1_IRQ_Function+0x120>)
 8002a2c:	b292      	uxth	r2, r2
 8002a2e:	851a      	strh	r2, [r3, #40]	; 0x28
				p1_out++;
 8002a30:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <USART1_IRQ_Function+0x138>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <USART1_IRQ_Function+0x138>)
 8002a3a:	801a      	strh	r2, [r3, #0]
				p1_out %= UTX1_LEN; 
 8002a3c:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <USART1_IRQ_Function+0x138>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	221f      	movs	r2, #31
 8002a42:	4013      	ands	r3, r2
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <USART1_IRQ_Function+0x138>)
 8002a48:	801a      	strh	r2, [r3, #0]
				tx1_restart = 0;
 8002a4a:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <USART1_IRQ_Function+0x144>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e00e      	b.n	8002a70 <USART1_IRQ_Function+0xe0>
			}
			else 
			{
				tx1_restart = 1;
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <USART1_IRQ_Function+0x144>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	701a      	strb	r2, [r3, #0]
				CLEAR_BIT(USART1->CR1, USART_CR1_TXEIE);
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <USART1_IRQ_Function+0x120>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <USART1_IRQ_Function+0x120>)
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	438a      	bics	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]
				SET_BIT(USART1->CR1, USART_CR1_TCIE);
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <USART1_IRQ_Function+0x120>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <USART1_IRQ_Function+0x120>)
 8002a6a:	2140      	movs	r1, #64	; 0x40
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]
			}
		}
		
		if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))		
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2240      	movs	r2, #64	; 0x40
 8002a74:	4013      	ands	r3, r2
 8002a76:	d016      	beq.n	8002aa6 <USART1_IRQ_Function+0x116>
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d012      	beq.n	8002aa6 <USART1_IRQ_Function+0x116>
		{
			RS485_DE_LOW;
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	0159      	lsls	r1, r3, #5
 8002a84:	2390      	movs	r3, #144	; 0x90
 8002a86:	05db      	lsls	r3, r3, #23
 8002a88:	2200      	movs	r2, #0
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f7fe fcdd 	bl	800144a <HAL_GPIO_WritePin>
			CLEAR_BIT(USART1->CR1, USART_CR1_TCIE);
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <USART1_IRQ_Function+0x120>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <USART1_IRQ_Function+0x120>)
 8002a96:	2140      	movs	r1, #64	; 0x40
 8002a98:	438a      	bics	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		__HAL_UART_CLEAR_FLAG(&huart1, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
	}
}
 8002a9c:	e003      	b.n	8002aa6 <USART1_IRQ_Function+0x116>
		__HAL_UART_CLEAR_FLAG(&huart1, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <USART1_IRQ_Function+0x148>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b006      	add	sp, #24
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	0000080f 	.word	0x0000080f
 8002ab8:	20000241 	.word	0x20000241
 8002abc:	200002a4 	.word	0x200002a4
 8002ac0:	20000244 	.word	0x20000244
 8002ac4:	200002aa 	.word	0x200002aa
 8002ac8:	200002a6 	.word	0x200002a6
 8002acc:	200002a8 	.word	0x200002a8
 8002ad0:	20000264 	.word	0x20000264
 8002ad4:	20000005 	.word	0x20000005
 8002ad8:	20000764 	.word	0x20000764

08002adc <Rs485_proc>:


//------------------------------------------------------------------------------------------
void Rs485_proc(void) 
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t Rcv_Crc, cmp_Crc;
	
	if(flg_485_send)
 8002ae2:	4b7a      	ldr	r3, [pc, #488]	; (8002ccc <Rs485_proc+0x1f0>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d100      	bne.n	8002aec <Rs485_proc+0x10>
 8002aea:	e0ad      	b.n	8002c48 <Rs485_proc+0x16c>
	{
		flg_485_send = 0;
 8002aec:	4b77      	ldr	r3, [pc, #476]	; (8002ccc <Rs485_proc+0x1f0>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]

		utx1_send[0] = 0xB1;
 8002af2:	4b77      	ldr	r3, [pc, #476]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002af4:	22b1      	movs	r2, #177	; 0xb1
 8002af6:	701a      	strb	r2, [r3, #0]
		utx1_send[1] = RegularConvData_Tab[0] & 0xff;
 8002af8:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	4b73      	ldr	r3, [pc, #460]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b02:	705a      	strb	r2, [r3, #1]
		utx1_send[2] = RegularConvData_Tab[0]>>8  & 0xff;
 8002b04:	4b73      	ldr	r3, [pc, #460]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	4b6f      	ldr	r3, [pc, #444]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b12:	709a      	strb	r2, [r3, #2]
		utx1_send[3] = RegularConvData_Tab[1] & 0xff;;
 8002b14:	4b6f      	ldr	r3, [pc, #444]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002b16:	885b      	ldrh	r3, [r3, #2]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b6c      	ldr	r3, [pc, #432]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b1e:	70da      	strb	r2, [r3, #3]
		utx1_send[4] = RegularConvData_Tab[1]>>8  & 0xff;;
 8002b20:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002b22:	885b      	ldrh	r3, [r3, #2]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b2e:	711a      	strb	r2, [r3, #4]
		utx1_send[5] = RegularConvData_Tab[2] & 0xff;
 8002b30:	4b68      	ldr	r3, [pc, #416]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002b32:	889b      	ldrh	r3, [r3, #4]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b3a:	715a      	strb	r2, [r3, #5]
		utx1_send[6] = RegularConvData_Tab[2]>>8  & 0xff;
 8002b3c:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002b3e:	889b      	ldrh	r3, [r3, #4]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b4a:	719a      	strb	r2, [r3, #6]
		utx1_send[7] = RegularConvData_Tab[3] & 0xff;;
 8002b4c:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002b4e:	88db      	ldrh	r3, [r3, #6]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	4b5e      	ldr	r3, [pc, #376]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b56:	71da      	strb	r2, [r3, #7]
		utx1_send[8] = RegularConvData_Tab[3]>>8  & 0xff;;
 8002b58:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002b5a:	88db      	ldrh	r3, [r3, #6]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b5a      	ldr	r3, [pc, #360]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b66:	721a      	strb	r2, [r3, #8]
		utx1_send[9] = RegularConvData_Tab[4] & 0xff;;
 8002b68:	4b5a      	ldr	r3, [pc, #360]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002b6a:	891b      	ldrh	r3, [r3, #8]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b72:	725a      	strb	r2, [r3, #9]
		utx1_send[10] = RegularConvData_Tab[4]>>8  & 0xff;;
 8002b74:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002b76:	891b      	ldrh	r3, [r3, #8]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b82:	729a      	strb	r2, [r3, #10]
		utx1_send[11] = RegularConvData_Tab[5] & 0xff;;
 8002b84:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002b86:	895b      	ldrh	r3, [r3, #10]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b50      	ldr	r3, [pc, #320]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b8e:	72da      	strb	r2, [r3, #11]
		utx1_send[12] = RegularConvData_Tab[5]>>8  & 0xff;;
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002b92:	895b      	ldrh	r3, [r3, #10]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4b4c      	ldr	r3, [pc, #304]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002b9e:	731a      	strb	r2, [r3, #12]
		utx1_send[13] = RegularConvData_Tab[6] & 0xff;;
 8002ba0:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002ba2:	899b      	ldrh	r3, [r3, #12]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	4b49      	ldr	r3, [pc, #292]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002baa:	735a      	strb	r2, [r3, #13]
		utx1_send[14] = RegularConvData_Tab[6]>>8  & 0xff;;
 8002bac:	4b49      	ldr	r3, [pc, #292]	; (8002cd4 <Rs485_proc+0x1f8>)
 8002bae:	899b      	ldrh	r3, [r3, #12]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	4b45      	ldr	r3, [pc, #276]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002bba:	739a      	strb	r2, [r3, #14]
		utx1_send[15] = urx2_buf[3];
 8002bbc:	4b46      	ldr	r3, [pc, #280]	; (8002cd8 <Rs485_proc+0x1fc>)
 8002bbe:	78da      	ldrb	r2, [r3, #3]
 8002bc0:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002bc2:	73da      	strb	r2, [r3, #15]
		utx1_send[16] = urx2_buf[4];
 8002bc4:	4b44      	ldr	r3, [pc, #272]	; (8002cd8 <Rs485_proc+0x1fc>)
 8002bc6:	791a      	ldrb	r2, [r3, #4]
 8002bc8:	4b41      	ldr	r3, [pc, #260]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002bca:	741a      	strb	r2, [r3, #16]
		utx1_send[17] = urx2_buf[5];
 8002bcc:	4b42      	ldr	r3, [pc, #264]	; (8002cd8 <Rs485_proc+0x1fc>)
 8002bce:	795a      	ldrb	r2, [r3, #5]
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002bd2:	745a      	strb	r2, [r3, #17]
		utx1_send[18] = urx2_buf[6];
 8002bd4:	4b40      	ldr	r3, [pc, #256]	; (8002cd8 <Rs485_proc+0x1fc>)
 8002bd6:	799a      	ldrb	r2, [r3, #6]
 8002bd8:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002bda:	749a      	strb	r2, [r3, #18]
		utx1_send[19] = urx2_buf[7];
 8002bdc:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <Rs485_proc+0x1fc>)
 8002bde:	79da      	ldrb	r2, [r3, #7]
 8002be0:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002be2:	74da      	strb	r2, [r3, #19]
		utx1_send[20] = urx2_buf[8];
 8002be4:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <Rs485_proc+0x1fc>)
 8002be6:	7a1a      	ldrb	r2, [r3, #8]
 8002be8:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002bea:	751a      	strb	r2, [r3, #20]
		utx1_send[21] = dio_input;
 8002bec:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <Rs485_proc+0x200>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	5e9b      	ldrsh	r3, [r3, r2]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002bf6:	755a      	strb	r2, [r3, #21]
		cmp_Crc = MakeCCITT16(utx1_send, 22);
 8002bf8:	1d3c      	adds	r4, r7, #4
 8002bfa:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002bfc:	2116      	movs	r1, #22
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff fd46 	bl	8002690 <MakeCCITT16>
 8002c04:	0003      	movs	r3, r0
 8002c06:	8023      	strh	r3, [r4, #0]
		utx1_send[22] = (uint8_t)((cmp_Crc & 0xFF00) >> 8);
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002c14:	759a      	strb	r2, [r3, #22]
		utx1_send[23] = (uint8_t)(cmp_Crc & 0x00FF);
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002c1e:	75da      	strb	r2, [r3, #23]
		
		for(i=0; i<24; i++)
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e00b      	b.n	8002c40 <Rs485_proc+0x164>
			SendChar1(utx1_send[i]);
 8002c28:	1dfb      	adds	r3, r7, #7
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4a28      	ldr	r2, [pc, #160]	; (8002cd0 <Rs485_proc+0x1f4>)
 8002c2e:	5cd3      	ldrb	r3, [r2, r3]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 f863 	bl	8002cfc <SendChar1>
		for(i=0; i<24; i++)
 8002c36:	1dfb      	adds	r3, r7, #7
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	1dfb      	adds	r3, r7, #7
 8002c3c:	3201      	adds	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	1dfb      	adds	r3, r7, #7
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b17      	cmp	r3, #23
 8002c46:	d9ef      	bls.n	8002c28 <Rs485_proc+0x14c>
//			flg_rs485_error = 1;
//		}

	}
	
	if(urx1_comp)
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <Rs485_proc+0x204>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d039      	beq.n	8002cc4 <Rs485_proc+0x1e8>
	{
		if(urx1_count > 4)
 8002c50:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <Rs485_proc+0x208>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d92f      	bls.n	8002cb8 <Rs485_proc+0x1dc>
		{
			cmp_Crc = MakeCCITT16(urx1_buf, 5);
 8002c58:	1d3c      	adds	r4, r7, #4
 8002c5a:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <Rs485_proc+0x20c>)
 8002c5c:	2105      	movs	r1, #5
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff fd16 	bl	8002690 <MakeCCITT16>
 8002c64:	0003      	movs	r3, r0
 8002c66:	8023      	strh	r3, [r4, #0]
			Rcv_Crc= urx1_buf[5] <<8 | urx1_buf[6];
 8002c68:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <Rs485_proc+0x20c>)
 8002c6a:	795b      	ldrb	r3, [r3, #5]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	b21a      	sxth	r2, r3
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <Rs485_proc+0x20c>)
 8002c72:	799b      	ldrb	r3, [r3, #6]
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	4313      	orrs	r3, r2
 8002c78:	b21a      	sxth	r2, r3
 8002c7a:	1cbb      	adds	r3, r7, #2
 8002c7c:	801a      	strh	r2, [r3, #0]
			if(cmp_Crc == Rcv_Crc)
 8002c7e:	1d3a      	adds	r2, r7, #4
 8002c80:	1cbb      	adds	r3, r7, #2
 8002c82:	8812      	ldrh	r2, [r2, #0]
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d116      	bne.n	8002cb8 <Rs485_proc+0x1dc>
			{
				if(urx1_buf[0] == 0xA1)
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <Rs485_proc+0x20c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2ba1      	cmp	r3, #161	; 0xa1
 8002c90:	d112      	bne.n	8002cb8 <Rs485_proc+0x1dc>
				{
					footmode= urx1_buf[1];
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <Rs485_proc+0x20c>)
 8002c94:	785a      	ldrb	r2, [r3, #1]
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <Rs485_proc+0x210>)
 8002c98:	701a      	strb	r2, [r3, #0]
					flg_do_out1 = urx1_buf[2];
 8002c9a:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <Rs485_proc+0x20c>)
 8002c9c:	789a      	ldrb	r2, [r3, #2]
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <Rs485_proc+0x214>)
 8002ca0:	701a      	strb	r2, [r3, #0]
					do_out1 =urx1_buf[3];
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <Rs485_proc+0x20c>)
 8002ca4:	78da      	ldrb	r2, [r3, #3]
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <Rs485_proc+0x218>)
 8002ca8:	701a      	strb	r2, [r3, #0]
					do_out2 =urx1_buf[4];
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <Rs485_proc+0x20c>)
 8002cac:	791a      	ldrb	r2, [r3, #4]
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <Rs485_proc+0x21c>)
 8002cb0:	701a      	strb	r2, [r3, #0]
					flg_485_send =1 ;
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <Rs485_proc+0x1f0>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
				}
			}


		}
		urx1_count = 0;
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <Rs485_proc+0x208>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
		urx1_comp = 0;
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <Rs485_proc+0x204>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]

	}
}
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b003      	add	sp, #12
 8002cca:	bd90      	pop	{r4, r7, pc}
 8002ccc:	20000240 	.word	0x20000240
 8002cd0:	20000284 	.word	0x20000284
 8002cd4:	20000874 	.word	0x20000874
 8002cd8:	200002b0 	.word	0x200002b0
 8002cdc:	200006d6 	.word	0x200006d6
 8002ce0:	20000241 	.word	0x20000241
 8002ce4:	200002a4 	.word	0x200002a4
 8002ce8:	20000244 	.word	0x20000244
 8002cec:	200006d4 	.word	0x200006d4
 8002cf0:	200006db 	.word	0x200006db
 8002cf4:	200006d9 	.word	0x200006d9
 8002cf8:	200006da 	.word	0x200006da

08002cfc <SendChar1>:

//------------------------------------------------------------------------------------------
void SendChar1(uint8_t send_c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	0002      	movs	r2, r0
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	701a      	strb	r2, [r3, #0]
	uint16_t pin_temp;

	pin_temp = p1_in + 1;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <SendChar1+0x84>)
 8002d0a:	881a      	ldrh	r2, [r3, #0]
 8002d0c:	210e      	movs	r1, #14
 8002d0e:	187b      	adds	r3, r7, r1
 8002d10:	3201      	adds	r2, #1
 8002d12:	801a      	strh	r2, [r3, #0]
	pin_temp %= UTX1_LEN;
 8002d14:	187b      	adds	r3, r7, r1
 8002d16:	187a      	adds	r2, r7, r1
 8002d18:	8812      	ldrh	r2, [r2, #0]
 8002d1a:	211f      	movs	r1, #31
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	801a      	strh	r2, [r3, #0]

	while(pin_temp == p1_out)
 8002d20:	e002      	b.n	8002d28 <SendChar1+0x2c>
	{
		HAL_Delay(1);
 8002d22:	2001      	movs	r0, #1
 8002d24:	f7fd fae0 	bl	80002e8 <HAL_Delay>
	while(pin_temp == p1_out)
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <SendChar1+0x88>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	200e      	movs	r0, #14
 8002d2e:	183a      	adds	r2, r7, r0
 8002d30:	8812      	ldrh	r2, [r2, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d0f5      	beq.n	8002d22 <SendChar1+0x26>
	}
	
	utx1_buf[p1_in] = send_c;
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <SendChar1+0x84>)
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <SendChar1+0x8c>)
 8002d3e:	1dfa      	adds	r2, r7, #7
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	545a      	strb	r2, [r3, r1]
	p1_in = pin_temp;
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <SendChar1+0x84>)
 8002d46:	183a      	adds	r2, r7, r0
 8002d48:	8812      	ldrh	r2, [r2, #0]
 8002d4a:	801a      	strh	r2, [r3, #0]

	if(tx1_restart) 
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <SendChar1+0x90>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <SendChar1+0x7a>
	{
		tx1_restart = 0;
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <SendChar1+0x90>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
		RS485_DE_HIGH;
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	0159      	lsls	r1, r3, #5
 8002d5e:	2390      	movs	r3, #144	; 0x90
 8002d60:	05db      	lsls	r3, r3, #23
 8002d62:	2201      	movs	r2, #1
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7fe fb70 	bl	800144a <HAL_GPIO_WritePin>
		SET_BIT(USART1->CR1, USART_CR1_TXEIE);
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <SendChar1+0x94>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <SendChar1+0x94>)
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]
	}
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b004      	add	sp, #16
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	200002a8 	.word	0x200002a8
 8002d84:	200002a6 	.word	0x200002a6
 8002d88:	20000264 	.word	0x20000264
 8002d8c:	20000005 	.word	0x20000005
 8002d90:	40013800 	.word	0x40013800

08002d94 <USART2_IRQ_Function>:
//--------------------------------------------------------------------------------------------------------------
extern 	UART_HandleTypeDef huart2;

//==========================================================================================================
void USART2_IRQ_Function(void)				// For debug 232
{	
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
	uint8_t data_char;
	
	uint32_t isrflags   = READ_REG(USART2->ISR);
 8002d9a:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <USART2_IRQ_Function+0x120>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(USART2->CR1);
 8002da0:	4b44      	ldr	r3, [pc, #272]	; (8002eb4 <USART2_IRQ_Function+0x120>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	613b      	str	r3, [r7, #16]
	uint32_t cr3its     = READ_REG(USART2->CR3);
 8002da6:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <USART2_IRQ_Function+0x120>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	60fb      	str	r3, [r7, #12]

	uint32_t errorflags;

	/* If no error occurs */
	errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	220f      	movs	r2, #15
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
	if(errorflags == RESET)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d000      	beq.n	8002dbc <USART2_IRQ_Function+0x28>
 8002dba:	e073      	b.n	8002ea4 <USART2_IRQ_Function+0x110>
	{
		// Receive
		if (((isrflags & USART_ISR_RXNE) != 0U) && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d023      	beq.n	8002e0c <USART2_IRQ_Function+0x78>
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d01f      	beq.n	8002e0c <USART2_IRQ_Function+0x78>
		{
			data_char = USART2->RDR & 0x00FF;
 8002dcc:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <USART2_IRQ_Function+0x120>)
 8002dce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	701a      	strb	r2, [r3, #0]
		
			if((!urx2_comp) && (urx2_count < URX2_LEN))
 8002dd6:	4b38      	ldr	r3, [pc, #224]	; (8002eb8 <USART2_IRQ_Function+0x124>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4053      	eors	r3, r2
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <USART2_IRQ_Function+0x78>
 8002de4:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <USART2_IRQ_Function+0x128>)
 8002de6:	881a      	ldrh	r2, [r3, #0]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d20d      	bcs.n	8002e0c <USART2_IRQ_Function+0x78>
			{
				urx2_buf[urx2_count++] = data_char;
 8002df0:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <USART2_IRQ_Function+0x128>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	b291      	uxth	r1, r2
 8002df8:	4a30      	ldr	r2, [pc, #192]	; (8002ebc <USART2_IRQ_Function+0x128>)
 8002dfa:	8011      	strh	r1, [r2, #0]
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <USART2_IRQ_Function+0x12c>)
 8002e00:	1dfa      	adds	r2, r7, #7
 8002e02:	7812      	ldrb	r2, [r2, #0]
 8002e04:	545a      	strb	r2, [r3, r1]
				urx2_tout = 2;
 8002e06:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <USART2_IRQ_Function+0x130>)
 8002e08:	2202      	movs	r2, #2
 8002e0a:	801a      	strh	r2, [r3, #0]
			}
		}

		// Transmission
		if (((isrflags & USART_ISR_TXE) != 0U) && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	4013      	ands	r3, r2
 8002e12:	d031      	beq.n	8002e78 <USART2_IRQ_Function+0xe4>
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d02d      	beq.n	8002e78 <USART2_IRQ_Function+0xe4>
		{
			if(p2_out != p2_in)
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <USART2_IRQ_Function+0x134>)
 8002e1e:	881a      	ldrh	r2, [r3, #0]
 8002e20:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <USART2_IRQ_Function+0x138>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d018      	beq.n	8002e5a <USART2_IRQ_Function+0xc6>
			{
				USART2->TDR = utx2_buf[p2_out];
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <USART2_IRQ_Function+0x134>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	001a      	movs	r2, r3
 8002e2e:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <USART2_IRQ_Function+0x13c>)
 8002e30:	5c9a      	ldrb	r2, [r3, r2]
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <USART2_IRQ_Function+0x120>)
 8002e34:	b292      	uxth	r2, r2
 8002e36:	851a      	strh	r2, [r3, #40]	; 0x28
				p2_out++;
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <USART2_IRQ_Function+0x134>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <USART2_IRQ_Function+0x134>)
 8002e42:	801a      	strh	r2, [r3, #0]
				p2_out %= UTX2_LEN;
 8002e44:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <USART2_IRQ_Function+0x134>)
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	05db      	lsls	r3, r3, #23
 8002e4a:	0ddb      	lsrs	r3, r3, #23
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <USART2_IRQ_Function+0x134>)
 8002e50:	801a      	strh	r2, [r3, #0]
				tx2_restart = 0;
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <USART2_IRQ_Function+0x140>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	e00e      	b.n	8002e78 <USART2_IRQ_Function+0xe4>
			}
			else
			{
				tx2_restart = 1;
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <USART2_IRQ_Function+0x140>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
				CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE);
 8002e60:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <USART2_IRQ_Function+0x120>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <USART2_IRQ_Function+0x120>)
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	438a      	bics	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
				SET_BIT(USART2->CR1, USART_CR1_TCIE);
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <USART2_IRQ_Function+0x120>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <USART2_IRQ_Function+0x120>)
 8002e72:	2140      	movs	r1, #64	; 0x40
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
			}
		}

		if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d015      	beq.n	8002eac <USART2_IRQ_Function+0x118>
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2240      	movs	r2, #64	; 0x40
 8002e84:	4013      	ands	r3, r2
 8002e86:	d011      	beq.n	8002eac <USART2_IRQ_Function+0x118>
		{
			GSEN_DE2_LOW;
 8002e88:	2390      	movs	r3, #144	; 0x90
 8002e8a:	05db      	lsls	r3, r3, #23
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2102      	movs	r1, #2
 8002e90:	0018      	movs	r0, r3
 8002e92:	f7fe fada 	bl	800144a <HAL_GPIO_WritePin>
			CLEAR_BIT(USART2->CR1, USART_CR1_TCIE);
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <USART2_IRQ_Function+0x120>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <USART2_IRQ_Function+0x120>)
 8002e9c:	2140      	movs	r1, #64	; 0x40
 8002e9e:	438a      	bics	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
	}
}
 8002ea2:	e003      	b.n	8002eac <USART2_IRQ_Function+0x118>
		__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <USART2_IRQ_Function+0x144>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	220f      	movs	r2, #15
 8002eaa:	621a      	str	r2, [r3, #32]
}
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b006      	add	sp, #24
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40004400 	.word	0x40004400
 8002eb8:	200002ae 	.word	0x200002ae
 8002ebc:	200006b0 	.word	0x200006b0
 8002ec0:	200002b0 	.word	0x200002b0
 8002ec4:	200006b6 	.word	0x200006b6
 8002ec8:	200006b2 	.word	0x200006b2
 8002ecc:	200006b4 	.word	0x200006b4
 8002ed0:	200004b0 	.word	0x200004b0
 8002ed4:	20000006 	.word	0x20000006
 8002ed8:	200007ec 	.word	0x200007ec

08002edc <GSen485_2_Proc>:

//---------------------------------------------------------------------------------------
void GSen485_2_Proc(void)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0

//	mprintf("GSen485_2 Proc Start.. !!\n");

	

	if((sync_gsen2 == 0) && (run_gsen2 == 0))
 8002ee2:	4b79      	ldr	r3, [pc, #484]	; (80030c8 <GSen485_2_Proc+0x1ec>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4053      	eors	r3, r2
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <GSen485_2_Proc+0x24>
 8002ef0:	4b76      	ldr	r3, [pc, #472]	; (80030cc <GSen485_2_Proc+0x1f0>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4053      	eors	r3, r2
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d000      	beq.n	8002f00 <GSen485_2_Proc+0x24>
 8002efe:	e0de      	b.n	80030be <GSen485_2_Proc+0x1e2>
	{
		return ;
	}
	else
	{
		sync_gsen2 = 0;
 8002f00:	4b71      	ldr	r3, [pc, #452]	; (80030c8 <GSen485_2_Proc+0x1ec>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
		run_gsen2 = 0;
 8002f06:	4b71      	ldr	r3, [pc, #452]	; (80030cc <GSen485_2_Proc+0x1f0>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]

		if(urx2_comp || (urx2_count >= 17))
 8002f0c:	4b70      	ldr	r3, [pc, #448]	; (80030d0 <GSen485_2_Proc+0x1f4>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d104      	bne.n	8002f1e <GSen485_2_Proc+0x42>
 8002f14:	4b6f      	ldr	r3, [pc, #444]	; (80030d4 <GSen485_2_Proc+0x1f8>)
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d800      	bhi.n	8002f1e <GSen485_2_Proc+0x42>
 8002f1c:	e091      	b.n	8003042 <GSen485_2_Proc+0x166>
		{

			if((urx2_count == 17) && (urx2_buf[0] == 0x50))
 8002f1e:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <GSen485_2_Proc+0x1f8>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	2b11      	cmp	r3, #17
 8002f24:	d000      	beq.n	8002f28 <GSen485_2_Proc+0x4c>
 8002f26:	e085      	b.n	8003034 <GSen485_2_Proc+0x158>
 8002f28:	4b6b      	ldr	r3, [pc, #428]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b50      	cmp	r3, #80	; 0x50
 8002f2e:	d000      	beq.n	8002f32 <GSen485_2_Proc+0x56>
 8002f30:	e080      	b.n	8003034 <GSen485_2_Proc+0x158>
			{
				//memcpy(&gsen2_buf[idx_gsen2][0], &urx2_buf[3], 12);
				gsen2_buf[0] = urx2_buf[3] << 8 | urx2_buf[4];
 8002f32:	4b69      	ldr	r3, [pc, #420]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002f34:	78db      	ldrb	r3, [r3, #3]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	b21a      	sxth	r2, r3
 8002f3a:	4b67      	ldr	r3, [pc, #412]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002f3c:	791b      	ldrb	r3, [r3, #4]
 8002f3e:	b21b      	sxth	r3, r3
 8002f40:	4313      	orrs	r3, r2
 8002f42:	b21b      	sxth	r3, r3
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	4b65      	ldr	r3, [pc, #404]	; (80030dc <GSen485_2_Proc+0x200>)
 8002f48:	801a      	strh	r2, [r3, #0]
				gsen2_buf[1] = urx2_buf[5] << 8 | urx2_buf[6];
 8002f4a:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002f4c:	795b      	ldrb	r3, [r3, #5]
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	b21a      	sxth	r2, r3
 8002f52:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002f54:	799b      	ldrb	r3, [r3, #6]
 8002f56:	b21b      	sxth	r3, r3
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	4b5f      	ldr	r3, [pc, #380]	; (80030dc <GSen485_2_Proc+0x200>)
 8002f60:	805a      	strh	r2, [r3, #2]
				gsen2_buf[2] = urx2_buf[7] << 8 | urx2_buf[8];
 8002f62:	4b5d      	ldr	r3, [pc, #372]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002f64:	79db      	ldrb	r3, [r3, #7]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	b21a      	sxth	r2, r3
 8002f6a:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002f6c:	7a1b      	ldrb	r3, [r3, #8]
 8002f6e:	b21b      	sxth	r3, r3
 8002f70:	4313      	orrs	r3, r2
 8002f72:	b21b      	sxth	r3, r3
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	4b59      	ldr	r3, [pc, #356]	; (80030dc <GSen485_2_Proc+0x200>)
 8002f78:	809a      	strh	r2, [r3, #4]
				gsen2_buf[3] = urx2_buf[9] << 8 | urx2_buf[10];
 8002f7a:	4b57      	ldr	r3, [pc, #348]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002f7c:	7a5b      	ldrb	r3, [r3, #9]
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	b21a      	sxth	r2, r3
 8002f82:	4b55      	ldr	r3, [pc, #340]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002f84:	7a9b      	ldrb	r3, [r3, #10]
 8002f86:	b21b      	sxth	r3, r3
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	4b53      	ldr	r3, [pc, #332]	; (80030dc <GSen485_2_Proc+0x200>)
 8002f90:	80da      	strh	r2, [r3, #6]
				gsen2_buf[4]= urx2_buf[11] << 8 | urx2_buf[12];
 8002f92:	4b51      	ldr	r3, [pc, #324]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002f94:	7adb      	ldrb	r3, [r3, #11]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	4b4f      	ldr	r3, [pc, #316]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002f9c:	7b1b      	ldrb	r3, [r3, #12]
 8002f9e:	b21b      	sxth	r3, r3
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	4b4d      	ldr	r3, [pc, #308]	; (80030dc <GSen485_2_Proc+0x200>)
 8002fa8:	811a      	strh	r2, [r3, #8]
				gsen2_buf[5] = urx2_buf[13] << 8 | urx2_buf[14];
 8002faa:	4b4b      	ldr	r3, [pc, #300]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002fac:	7b5b      	ldrb	r3, [r3, #13]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	b21a      	sxth	r2, r3
 8002fb2:	4b49      	ldr	r3, [pc, #292]	; (80030d8 <GSen485_2_Proc+0x1fc>)
 8002fb4:	7b9b      	ldrb	r3, [r3, #14]
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	b21b      	sxth	r3, r3
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	4b47      	ldr	r3, [pc, #284]	; (80030dc <GSen485_2_Proc+0x200>)
 8002fc0:	815a      	strh	r2, [r3, #10]

				gsen2_timeout = 50;		// 50ms
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <GSen485_2_Proc+0x204>)
 8002fc4:	2232      	movs	r2, #50	; 0x32
 8002fc6:	801a      	strh	r2, [r3, #0]

				utx2_sendbuf[0] = 0x50;				// Device Address
 8002fc8:	4b46      	ldr	r3, [pc, #280]	; (80030e4 <GSen485_2_Proc+0x208>)
 8002fca:	2250      	movs	r2, #80	; 0x50
 8002fcc:	701a      	strb	r2, [r3, #0]
				utx2_sendbuf[1] = 0x03;				// Function Code
 8002fce:	4b45      	ldr	r3, [pc, #276]	; (80030e4 <GSen485_2_Proc+0x208>)
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	705a      	strb	r2, [r3, #1]
				utx2_sendbuf[2] = 0x00;				// Register Address High
 8002fd4:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <GSen485_2_Proc+0x208>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	709a      	strb	r2, [r3, #2]
				utx2_sendbuf[3] = 0x34;				// Register Address Low    Acceleration
 8002fda:	4b42      	ldr	r3, [pc, #264]	; (80030e4 <GSen485_2_Proc+0x208>)
 8002fdc:	2234      	movs	r2, #52	; 0x34
 8002fde:	70da      	strb	r2, [r3, #3]
				utx2_sendbuf[4] = 0x00;				// Register Data Count High
 8002fe0:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <GSen485_2_Proc+0x208>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	711a      	strb	r2, [r3, #4]
				utx2_sendbuf[5] = 0x06;				// Register DAta Count Low    Acceleration X, Y, Z
 8002fe6:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <GSen485_2_Proc+0x208>)
 8002fe8:	2206      	movs	r2, #6
 8002fea:	715a      	strb	r2, [r3, #5]

				make_crc = crc_modbus(utx2_sendbuf, 6);
 8002fec:	1cbc      	adds	r4, r7, #2
 8002fee:	4b3d      	ldr	r3, [pc, #244]	; (80030e4 <GSen485_2_Proc+0x208>)
 8002ff0:	2106      	movs	r1, #6
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff fb82 	bl	80026fc <crc_modbus>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	8023      	strh	r3, [r4, #0]
				utx2_sendbuf[6] = (make_crc & 0x00FF);	// CRC-16 Low Byte
 8002ffc:	1cbb      	adds	r3, r7, #2
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	4b38      	ldr	r3, [pc, #224]	; (80030e4 <GSen485_2_Proc+0x208>)
 8003004:	719a      	strb	r2, [r3, #6]
				utx2_sendbuf[7] = (make_crc >> 8);		// CRC-16 High Byte
 8003006:	1cbb      	adds	r3, r7, #2
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	b29b      	uxth	r3, r3
 800300e:	b2da      	uxtb	r2, r3
 8003010:	4b34      	ldr	r3, [pc, #208]	; (80030e4 <GSen485_2_Proc+0x208>)
 8003012:	71da      	strb	r2, [r3, #7]

				for(i=0; i<8; i++)
 8003014:	2300      	movs	r3, #0
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	e009      	b.n	800302e <GSen485_2_Proc+0x152>
					SendChar2(utx2_sendbuf[i]);
 800301a:	4a32      	ldr	r2, [pc, #200]	; (80030e4 <GSen485_2_Proc+0x208>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	18d3      	adds	r3, r2, r3
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f862 	bl	80030ec <SendChar2>
				for(i=0; i<8; i++)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3301      	adds	r3, #1
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b07      	cmp	r3, #7
 8003032:	d9f2      	bls.n	800301a <GSen485_2_Proc+0x13e>
			}

			urx2_count = 0;
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <GSen485_2_Proc+0x1f8>)
 8003036:	2200      	movs	r2, #0
 8003038:	801a      	strh	r2, [r3, #0]
			urx2_comp = 0;
 800303a:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <GSen485_2_Proc+0x1f4>)
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e03e      	b.n	80030c0 <GSen485_2_Proc+0x1e4>

		}
		else
		{
			if(gsen2_timeout == 0)
 8003042:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <GSen485_2_Proc+0x204>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d13a      	bne.n	80030c0 <GSen485_2_Proc+0x1e4>
			{

				idx_gsen2 = 0;
 800304a:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <GSen485_2_Proc+0x20c>)
 800304c:	2200      	movs	r2, #0
 800304e:	801a      	strh	r2, [r3, #0]

				utx2_sendbuf[0] = 0x50;				// Device Address
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <GSen485_2_Proc+0x208>)
 8003052:	2250      	movs	r2, #80	; 0x50
 8003054:	701a      	strb	r2, [r3, #0]
				utx2_sendbuf[1] = 0x03;				// Function Code
 8003056:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <GSen485_2_Proc+0x208>)
 8003058:	2203      	movs	r2, #3
 800305a:	705a      	strb	r2, [r3, #1]
				utx2_sendbuf[2] = 0x00;				// Register Address High
 800305c:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <GSen485_2_Proc+0x208>)
 800305e:	2200      	movs	r2, #0
 8003060:	709a      	strb	r2, [r3, #2]
				utx2_sendbuf[3] = 0x34;				// Register Address Low    Acceleration
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <GSen485_2_Proc+0x208>)
 8003064:	2234      	movs	r2, #52	; 0x34
 8003066:	70da      	strb	r2, [r3, #3]
				utx2_sendbuf[4] = 0x00;				// Register Data Count High
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <GSen485_2_Proc+0x208>)
 800306a:	2200      	movs	r2, #0
 800306c:	711a      	strb	r2, [r3, #4]
				utx2_sendbuf[5] = 0x06;				// Register DAta Count Low    Acceleration X, Y, Z
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <GSen485_2_Proc+0x208>)
 8003070:	2206      	movs	r2, #6
 8003072:	715a      	strb	r2, [r3, #5]

				make_crc = crc_modbus(utx2_sendbuf, 6);
 8003074:	1cbc      	adds	r4, r7, #2
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <GSen485_2_Proc+0x208>)
 8003078:	2106      	movs	r1, #6
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff fb3e 	bl	80026fc <crc_modbus>
 8003080:	0003      	movs	r3, r0
 8003082:	8023      	strh	r3, [r4, #0]
				utx2_sendbuf[6] = (make_crc & 0x00FF);	// CRC-16 Low Byte
 8003084:	1cbb      	adds	r3, r7, #2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <GSen485_2_Proc+0x208>)
 800308c:	719a      	strb	r2, [r3, #6]
				utx2_sendbuf[7] = (make_crc >> 8);		// CRC-16 High Byte
 800308e:	1cbb      	adds	r3, r7, #2
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	b29b      	uxth	r3, r3
 8003096:	b2da      	uxtb	r2, r3
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <GSen485_2_Proc+0x208>)
 800309a:	71da      	strb	r2, [r3, #7]

				for(i=0; i<8; i++)
 800309c:	2300      	movs	r3, #0
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	e009      	b.n	80030b6 <GSen485_2_Proc+0x1da>
					SendChar2(utx2_sendbuf[i]);
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <GSen485_2_Proc+0x208>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	18d3      	adds	r3, r2, r3
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 f81e 	bl	80030ec <SendChar2>
				for(i=0; i<8; i++)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3301      	adds	r3, #1
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b07      	cmp	r3, #7
 80030ba:	d9f2      	bls.n	80030a2 <GSen485_2_Proc+0x1c6>
 80030bc:	e000      	b.n	80030c0 <GSen485_2_Proc+0x1e4>
		return ;
 80030be:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

}
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b003      	add	sp, #12
 80030c4:	bd90      	pop	{r4, r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	200002ac 	.word	0x200002ac
 80030cc:	200002ad 	.word	0x200002ad
 80030d0:	200002ae 	.word	0x200002ae
 80030d4:	200006b0 	.word	0x200006b0
 80030d8:	200002b0 	.word	0x200002b0
 80030dc:	200006c4 	.word	0x200006c4
 80030e0:	200006d2 	.word	0x200006d2
 80030e4:	200006b8 	.word	0x200006b8
 80030e8:	200006d0 	.word	0x200006d0

080030ec <SendChar2>:
//---------------------------------------------------------------------------------------
void SendChar2(uint8_t send_c) 
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	0002      	movs	r2, r0
 80030f4:	1dfb      	adds	r3, r7, #7
 80030f6:	701a      	strb	r2, [r3, #0]
	uint16_t pin_temp;

	pin_temp = p2_in + 1;
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <SendChar2+0x80>)
 80030fa:	881a      	ldrh	r2, [r3, #0]
 80030fc:	210e      	movs	r1, #14
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	3201      	adds	r2, #1
 8003102:	801a      	strh	r2, [r3, #0]
	pin_temp %= UTX2_LEN;
 8003104:	187b      	adds	r3, r7, r1
 8003106:	187a      	adds	r2, r7, r1
 8003108:	8812      	ldrh	r2, [r2, #0]
 800310a:	05d2      	lsls	r2, r2, #23
 800310c:	0dd2      	lsrs	r2, r2, #23
 800310e:	801a      	strh	r2, [r3, #0]

	while(pin_temp == p2_out)
 8003110:	e002      	b.n	8003118 <SendChar2+0x2c>
	{
		HAL_Delay(1);
 8003112:	2001      	movs	r0, #1
 8003114:	f7fd f8e8 	bl	80002e8 <HAL_Delay>
	while(pin_temp == p2_out)
 8003118:	4b15      	ldr	r3, [pc, #84]	; (8003170 <SendChar2+0x84>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	200e      	movs	r0, #14
 800311e:	183a      	adds	r2, r7, r0
 8003120:	8812      	ldrh	r2, [r2, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d0f5      	beq.n	8003112 <SendChar2+0x26>
	}
	utx2_buf[p2_in] = send_c;
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <SendChar2+0x80>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	0019      	movs	r1, r3
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <SendChar2+0x88>)
 800312e:	1dfa      	adds	r2, r7, #7
 8003130:	7812      	ldrb	r2, [r2, #0]
 8003132:	545a      	strb	r2, [r3, r1]
	p2_in = pin_temp;
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <SendChar2+0x80>)
 8003136:	183a      	adds	r2, r7, r0
 8003138:	8812      	ldrh	r2, [r2, #0]
 800313a:	801a      	strh	r2, [r3, #0]
	if(tx2_restart) 
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <SendChar2+0x8c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00f      	beq.n	8003164 <SendChar2+0x78>
	{
		tx2_restart = 0;
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <SendChar2+0x8c>)
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
		GSEN_DE2_HIGH;
 800314a:	2390      	movs	r3, #144	; 0x90
 800314c:	05db      	lsls	r3, r3, #23
 800314e:	2201      	movs	r2, #1
 8003150:	2102      	movs	r1, #2
 8003152:	0018      	movs	r0, r3
 8003154:	f7fe f979 	bl	800144a <HAL_GPIO_WritePin>
		SET_BIT(USART2->CR1, USART_CR1_TXEIE);
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <SendChar2+0x90>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <SendChar2+0x90>)
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
	}
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b004      	add	sp, #16
 800316a:	bd80      	pop	{r7, pc}
 800316c:	200006b4 	.word	0x200006b4
 8003170:	200006b2 	.word	0x200006b2
 8003174:	200004b0 	.word	0x200004b0
 8003178:	20000006 	.word	0x20000006
 800317c:	40004400 	.word	0x40004400

08003180 <keyprocess>:


extern uint32_t millis_count;

void keyprocess(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
	if(footmode == 0xff)
 8003184:	4b22      	ldr	r3, [pc, #136]	; (8003210 <keyprocess+0x90>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2bff      	cmp	r3, #255	; 0xff
 800318a:	d13b      	bne.n	8003204 <keyprocess+0x84>
	{
		if(DIO_IN1 != prekey_01)
 800318c:	4b21      	ldr	r3, [pc, #132]	; (8003214 <keyprocess+0x94>)
 800318e:	2108      	movs	r1, #8
 8003190:	0018      	movs	r0, r3
 8003192:	f7fe f93d 	bl	8001410 <HAL_GPIO_ReadPin>
 8003196:	0003      	movs	r3, r0
 8003198:	001a      	movs	r2, r3
 800319a:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <keyprocess+0x98>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d028      	beq.n	80031f4 <keyprocess+0x74>
		{
			if (millis_count - debounce_timer >= debounce_delay)
 80031a2:	4b1e      	ldr	r3, [pc, #120]	; (800321c <keyprocess+0x9c>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <keyprocess+0xa0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	1ad2      	subs	r2, r2, r3
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <keyprocess+0xa4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d31b      	bcc.n	80031ec <keyprocess+0x6c>
			{
				prekey_01 =DIO_IN1;
 80031b4:	4b17      	ldr	r3, [pc, #92]	; (8003214 <keyprocess+0x94>)
 80031b6:	2108      	movs	r1, #8
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7fe f929 	bl	8001410 <HAL_GPIO_ReadPin>
 80031be:	0003      	movs	r3, r0
 80031c0:	001a      	movs	r2, r3
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <keyprocess+0x98>)
 80031c4:	701a      	strb	r2, [r3, #0]

				if(DIO_IN1)
 80031c6:	4b13      	ldr	r3, [pc, #76]	; (8003214 <keyprocess+0x94>)
 80031c8:	2108      	movs	r1, #8
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7fe f920 	bl	8001410 <HAL_GPIO_ReadPin>
 80031d0:	1e03      	subs	r3, r0, #0
 80031d2:	d00b      	beq.n	80031ec <keyprocess+0x6c>
				{
					if(dio_input)
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <keyprocess+0xa8>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	5e9b      	ldrsh	r3, [r3, r2]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <keyprocess+0x66>
						dio_input =0;
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <keyprocess+0xa8>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	801a      	strh	r2, [r3, #0]
 80031e4:	e002      	b.n	80031ec <keyprocess+0x6c>
					else
						dio_input =1;
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <keyprocess+0xa8>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	801a      	strh	r2, [r3, #0]
				}

			}

			// 디바운스 타이머 업데이트
			debounce_timer = millis_count;
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <keyprocess+0x9c>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <keyprocess+0xa0>)
 80031f2:	601a      	str	r2, [r3, #0]

		}

		if(flg_do_out1)
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <keyprocess+0xac>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d006      	beq.n	800320a <keyprocess+0x8a>
			dio_input= 0;
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <keyprocess+0xa8>)
 80031fe:	2200      	movs	r2, #0
 8003200:	801a      	strh	r2, [r3, #0]
	// 	}

	// 	prekey_03 =DIO_IN3;
	// }

}
 8003202:	e002      	b.n	800320a <keyprocess+0x8a>
		dio_input = 0;
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <keyprocess+0xa8>)
 8003206:	2200      	movs	r2, #0
 8003208:	801a      	strh	r2, [r3, #0]
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	200006d4 	.word	0x200006d4
 8003214:	48000400 	.word	0x48000400
 8003218:	200006d8 	.word	0x200006d8
 800321c:	2000023c 	.word	0x2000023c
 8003220:	200006dc 	.word	0x200006dc
 8003224:	20000008 	.word	0x20000008
 8003228:	200006d6 	.word	0x200006d6
 800322c:	200006db 	.word	0x200006db

08003230 <oputputprocess>:


void oputputprocess(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
	if(do_out1)
 8003234:	4b14      	ldr	r3, [pc, #80]	; (8003288 <oputputprocess+0x58>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <oputputprocess+0x1c>
	{
		DO_OUT1_HIGH;
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	4812      	ldr	r0, [pc, #72]	; (800328c <oputputprocess+0x5c>)
 8003242:	2201      	movs	r2, #1
 8003244:	0019      	movs	r1, r3
 8003246:	f7fe f900 	bl	800144a <HAL_GPIO_WritePin>
 800324a:	e006      	b.n	800325a <oputputprocess+0x2a>
	}
	else
	{
		DO_OUT1_LOW;
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	480e      	ldr	r0, [pc, #56]	; (800328c <oputputprocess+0x5c>)
 8003252:	2200      	movs	r2, #0
 8003254:	0019      	movs	r1, r3
 8003256:	f7fe f8f8 	bl	800144a <HAL_GPIO_WritePin>
	}

	if(do_out2)
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <oputputprocess+0x60>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <oputputprocess+0x42>
	{
		DO_OUT2_HIGH;
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4809      	ldr	r0, [pc, #36]	; (800328c <oputputprocess+0x5c>)
 8003268:	2201      	movs	r2, #1
 800326a:	0019      	movs	r1, r3
 800326c:	f7fe f8ed 	bl	800144a <HAL_GPIO_WritePin>
	else
	{
		DO_OUT2_LOW;
	}

}
 8003270:	e006      	b.n	8003280 <oputputprocess+0x50>
		DO_OUT2_LOW;
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4805      	ldr	r0, [pc, #20]	; (800328c <oputputprocess+0x5c>)
 8003278:	2200      	movs	r2, #0
 800327a:	0019      	movs	r1, r3
 800327c:	f7fe f8e5 	bl	800144a <HAL_GPIO_WritePin>
}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	200006d9 	.word	0x200006d9
 800328c:	48000800 	.word	0x48000800
 8003290:	200006da 	.word	0x200006da

08003294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003298:	f7fc ffc2 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800329c:	f000 f815 	bl	80032ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032a0:	f000 f9c4 	bl	800362c <MX_GPIO_Init>
  MX_DMA_Init();
 80032a4:	f000 f9a4 	bl	80035f0 <MX_DMA_Init>
  MX_ADC_Init();
 80032a8:	f000 f876 	bl	8003398 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  MX_USART1_UART_Init();
 80032ac:	f000 f930 	bl	8003510 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80032b0:	f000 f966 	bl	8003580 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Timer_Proc();
 80032b4:	f7ff fb1e 	bl	80028f4 <Timer_Proc>
	  Rs485_proc();
 80032b8:	f7ff fc10 	bl	8002adc <Rs485_proc>
	  GSen485_2_Proc();
 80032bc:	f7ff fe0e 	bl	8002edc <GSen485_2_Proc>
	  keyprocess();
 80032c0:	f7ff ff5e 	bl	8003180 <keyprocess>
    oputputprocess();
 80032c4:	f7ff ffb4 	bl	8003230 <oputputprocess>
	  Timer_Proc();
 80032c8:	e7f4      	b.n	80032b4 <main+0x20>

080032ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032ca:	b590      	push	{r4, r7, lr}
 80032cc:	b095      	sub	sp, #84	; 0x54
 80032ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032d0:	2420      	movs	r4, #32
 80032d2:	193b      	adds	r3, r7, r4
 80032d4:	0018      	movs	r0, r3
 80032d6:	2330      	movs	r3, #48	; 0x30
 80032d8:	001a      	movs	r2, r3
 80032da:	2100      	movs	r1, #0
 80032dc:	f000 fc7a 	bl	8003bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032e0:	2310      	movs	r3, #16
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	0018      	movs	r0, r3
 80032e6:	2310      	movs	r3, #16
 80032e8:	001a      	movs	r2, r3
 80032ea:	2100      	movs	r1, #0
 80032ec:	f000 fc72 	bl	8003bd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032f0:	003b      	movs	r3, r7
 80032f2:	0018      	movs	r0, r3
 80032f4:	2310      	movs	r3, #16
 80032f6:	001a      	movs	r2, r3
 80032f8:	2100      	movs	r1, #0
 80032fa:	f000 fc6b 	bl	8003bd4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80032fe:	0021      	movs	r1, r4
 8003300:	187b      	adds	r3, r7, r1
 8003302:	2212      	movs	r2, #18
 8003304:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003306:	187b      	adds	r3, r7, r1
 8003308:	2201      	movs	r2, #1
 800330a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800330c:	187b      	adds	r3, r7, r1
 800330e:	2201      	movs	r2, #1
 8003310:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003312:	187b      	adds	r3, r7, r1
 8003314:	2210      	movs	r2, #16
 8003316:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003318:	187b      	adds	r3, r7, r1
 800331a:	2210      	movs	r2, #16
 800331c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800331e:	187b      	adds	r3, r7, r1
 8003320:	2202      	movs	r2, #2
 8003322:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003324:	187b      	adds	r3, r7, r1
 8003326:	2200      	movs	r2, #0
 8003328:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800332a:	187b      	adds	r3, r7, r1
 800332c:	22a0      	movs	r2, #160	; 0xa0
 800332e:	0392      	lsls	r2, r2, #14
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003332:	187b      	adds	r3, r7, r1
 8003334:	2200      	movs	r2, #0
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003338:	187b      	adds	r3, r7, r1
 800333a:	0018      	movs	r0, r3
 800333c:	f7fe f8a2 	bl	8001484 <HAL_RCC_OscConfig>
 8003340:	1e03      	subs	r3, r0, #0
 8003342:	d001      	beq.n	8003348 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8003344:	f000 fa4c 	bl	80037e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003348:	2110      	movs	r1, #16
 800334a:	187b      	adds	r3, r7, r1
 800334c:	2207      	movs	r2, #7
 800334e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003350:	187b      	adds	r3, r7, r1
 8003352:	2202      	movs	r2, #2
 8003354:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003356:	187b      	adds	r3, r7, r1
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800335c:	187b      	adds	r3, r7, r1
 800335e:	2200      	movs	r2, #0
 8003360:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003362:	187b      	adds	r3, r7, r1
 8003364:	2101      	movs	r1, #1
 8003366:	0018      	movs	r0, r3
 8003368:	f7fe fba6 	bl	8001ab8 <HAL_RCC_ClockConfig>
 800336c:	1e03      	subs	r3, r0, #0
 800336e:	d001      	beq.n	8003374 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003370:	f000 fa36 	bl	80037e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003374:	003b      	movs	r3, r7
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800337a:	003b      	movs	r3, r7
 800337c:	2203      	movs	r2, #3
 800337e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003380:	003b      	movs	r3, r7
 8003382:	0018      	movs	r0, r3
 8003384:	f7fe fcdc 	bl	8001d40 <HAL_RCCEx_PeriphCLKConfig>
 8003388:	1e03      	subs	r3, r0, #0
 800338a:	d001      	beq.n	8003390 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800338c:	f000 fa28 	bl	80037e0 <Error_Handler>
  }
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b015      	add	sp, #84	; 0x54
 8003396:	bd90      	pop	{r4, r7, pc}

08003398 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	0018      	movs	r0, r3
 80033a2:	230c      	movs	r3, #12
 80033a4:	001a      	movs	r2, r3
 80033a6:	2100      	movs	r1, #0
 80033a8:	f000 fc14 	bl	8003bd4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80033ac:	4b55      	ldr	r3, [pc, #340]	; (8003504 <MX_ADC_Init+0x16c>)
 80033ae:	4a56      	ldr	r2, [pc, #344]	; (8003508 <MX_ADC_Init+0x170>)
 80033b0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80033b2:	4b54      	ldr	r3, [pc, #336]	; (8003504 <MX_ADC_Init+0x16c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80033b8:	4b52      	ldr	r3, [pc, #328]	; (8003504 <MX_ADC_Init+0x16c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033be:	4b51      	ldr	r3, [pc, #324]	; (8003504 <MX_ADC_Init+0x16c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80033c4:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <MX_ADC_Init+0x16c>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033ca:	4b4e      	ldr	r3, [pc, #312]	; (8003504 <MX_ADC_Init+0x16c>)
 80033cc:	2204      	movs	r2, #4
 80033ce:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80033d0:	4b4c      	ldr	r3, [pc, #304]	; (8003504 <MX_ADC_Init+0x16c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80033d6:	4b4b      	ldr	r3, [pc, #300]	; (8003504 <MX_ADC_Init+0x16c>)
 80033d8:	2200      	movs	r2, #0
 80033da:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80033dc:	4b49      	ldr	r3, [pc, #292]	; (8003504 <MX_ADC_Init+0x16c>)
 80033de:	2201      	movs	r2, #1
 80033e0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80033e2:	4b48      	ldr	r3, [pc, #288]	; (8003504 <MX_ADC_Init+0x16c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033e8:	4b46      	ldr	r3, [pc, #280]	; (8003504 <MX_ADC_Init+0x16c>)
 80033ea:	22c2      	movs	r2, #194	; 0xc2
 80033ec:	32ff      	adds	r2, #255	; 0xff
 80033ee:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033f0:	4b44      	ldr	r3, [pc, #272]	; (8003504 <MX_ADC_Init+0x16c>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80033f6:	4b43      	ldr	r3, [pc, #268]	; (8003504 <MX_ADC_Init+0x16c>)
 80033f8:	2224      	movs	r2, #36	; 0x24
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80033fe:	4b41      	ldr	r3, [pc, #260]	; (8003504 <MX_ADC_Init+0x16c>)
 8003400:	2201      	movs	r2, #1
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003404:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <MX_ADC_Init+0x16c>)
 8003406:	0018      	movs	r0, r3
 8003408:	f7fc ff92 	bl	8000330 <HAL_ADC_Init>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d001      	beq.n	8003414 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003410:	f000 f9e6 	bl	80037e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	2206      	movs	r2, #6
 8003418:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	2280      	movs	r2, #128	; 0x80
 800341e:	0152      	lsls	r2, r2, #5
 8003420:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	2207      	movs	r2, #7
 8003426:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003428:	1d3a      	adds	r2, r7, #4
 800342a:	4b36      	ldr	r3, [pc, #216]	; (8003504 <MX_ADC_Init+0x16c>)
 800342c:	0011      	movs	r1, r2
 800342e:	0018      	movs	r0, r3
 8003430:	f7fd f958 	bl	80006e4 <HAL_ADC_ConfigChannel>
 8003434:	1e03      	subs	r3, r0, #0
 8003436:	d001      	beq.n	800343c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8003438:	f000 f9d2 	bl	80037e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	2207      	movs	r2, #7
 8003440:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003442:	1d3a      	adds	r2, r7, #4
 8003444:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <MX_ADC_Init+0x16c>)
 8003446:	0011      	movs	r1, r2
 8003448:	0018      	movs	r0, r3
 800344a:	f7fd f94b 	bl	80006e4 <HAL_ADC_ConfigChannel>
 800344e:	1e03      	subs	r3, r0, #0
 8003450:	d001      	beq.n	8003456 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8003452:	f000 f9c5 	bl	80037e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	2208      	movs	r2, #8
 800345a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800345c:	1d3a      	adds	r2, r7, #4
 800345e:	4b29      	ldr	r3, [pc, #164]	; (8003504 <MX_ADC_Init+0x16c>)
 8003460:	0011      	movs	r1, r2
 8003462:	0018      	movs	r0, r3
 8003464:	f7fd f93e 	bl	80006e4 <HAL_ADC_ConfigChannel>
 8003468:	1e03      	subs	r3, r0, #0
 800346a:	d001      	beq.n	8003470 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 800346c:	f000 f9b8 	bl	80037e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	2209      	movs	r2, #9
 8003474:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003476:	1d3a      	adds	r2, r7, #4
 8003478:	4b22      	ldr	r3, [pc, #136]	; (8003504 <MX_ADC_Init+0x16c>)
 800347a:	0011      	movs	r1, r2
 800347c:	0018      	movs	r0, r3
 800347e:	f7fd f931 	bl	80006e4 <HAL_ADC_ConfigChannel>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d001      	beq.n	800348a <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8003486:	f000 f9ab 	bl	80037e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	220a      	movs	r2, #10
 800348e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003490:	1d3a      	adds	r2, r7, #4
 8003492:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <MX_ADC_Init+0x16c>)
 8003494:	0011      	movs	r1, r2
 8003496:	0018      	movs	r0, r3
 8003498:	f7fd f924 	bl	80006e4 <HAL_ADC_ConfigChannel>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d001      	beq.n	80034a4 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 80034a0:	f000 f99e 	bl	80037e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	220e      	movs	r2, #14
 80034a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80034aa:	1d3a      	adds	r2, r7, #4
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <MX_ADC_Init+0x16c>)
 80034ae:	0011      	movs	r1, r2
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7fd f917 	bl	80006e4 <HAL_ADC_ConfigChannel>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d001      	beq.n	80034be <MX_ADC_Init+0x126>
  {
    Error_Handler();
 80034ba:	f000 f991 	bl	80037e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	220f      	movs	r2, #15
 80034c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80034c4:	1d3a      	adds	r2, r7, #4
 80034c6:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <MX_ADC_Init+0x16c>)
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7fd f90a 	bl	80006e4 <HAL_ADC_ConfigChannel>
 80034d0:	1e03      	subs	r3, r0, #0
 80034d2:	d001      	beq.n	80034d8 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 80034d4:	f000 f984 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <MX_ADC_Init+0x16c>)
 80034da:	0018      	movs	r0, r3
 80034dc:	f7fd fb0a 	bl	8000af4 <HAL_ADCEx_Calibration_Start>
  while(HAL_ADC_GetState(&hadc) != HAL_ADC_STATE_READY);
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <MX_ADC_Init+0x16c>)
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7fd f9f3 	bl	80008d0 <HAL_ADC_GetState>
 80034ea:	0003      	movs	r3, r0
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d1f8      	bne.n	80034e2 <MX_ADC_Init+0x14a>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)RegularConvData_Tab, 7);
 80034f0:	4906      	ldr	r1, [pc, #24]	; (800350c <MX_ADC_Init+0x174>)
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <MX_ADC_Init+0x16c>)
 80034f4:	2207      	movs	r2, #7
 80034f6:	0018      	movs	r0, r3
 80034f8:	f7fd f85a 	bl	80005b0 <HAL_ADC_Start_DMA>
//
  /* USER CODE END ADC_Init 2 */

}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	b004      	add	sp, #16
 8003502:	bd80      	pop	{r7, pc}
 8003504:	200006e0 	.word	0x200006e0
 8003508:	40012400 	.word	0x40012400
 800350c:	20000874 	.word	0x20000874

08003510 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003514:	4b18      	ldr	r3, [pc, #96]	; (8003578 <MX_USART1_UART_Init+0x68>)
 8003516:	4a19      	ldr	r2, [pc, #100]	; (800357c <MX_USART1_UART_Init+0x6c>)
 8003518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800351a:	4b17      	ldr	r3, [pc, #92]	; (8003578 <MX_USART1_UART_Init+0x68>)
 800351c:	22e1      	movs	r2, #225	; 0xe1
 800351e:	0252      	lsls	r2, r2, #9
 8003520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <MX_USART1_UART_Init+0x68>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <MX_USART1_UART_Init+0x68>)
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <MX_USART1_UART_Init+0x68>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003534:	4b10      	ldr	r3, [pc, #64]	; (8003578 <MX_USART1_UART_Init+0x68>)
 8003536:	220c      	movs	r2, #12
 8003538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <MX_USART1_UART_Init+0x68>)
 800353c:	2200      	movs	r2, #0
 800353e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <MX_USART1_UART_Init+0x68>)
 8003542:	2200      	movs	r2, #0
 8003544:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <MX_USART1_UART_Init+0x68>)
 8003548:	2200      	movs	r2, #0
 800354a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <MX_USART1_UART_Init+0x68>)
 800354e:	2200      	movs	r2, #0
 8003550:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8003552:	4809      	ldr	r0, [pc, #36]	; (8003578 <MX_USART1_UART_Init+0x68>)
 8003554:	2300      	movs	r3, #0
 8003556:	2200      	movs	r2, #0
 8003558:	2100      	movs	r1, #0
 800355a:	f7ff f829 	bl	80025b0 <HAL_RS485Ex_Init>
 800355e:	1e03      	subs	r3, r0, #0
 8003560:	d001      	beq.n	8003566 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8003562:	f000 f93d 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  SET_BIT(USART1->CR1, USART_CR1_RXNEIE);
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <MX_USART1_UART_Init+0x6c>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <MX_USART1_UART_Init+0x6c>)
 800356c:	2120      	movs	r1, #32
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_Init 2 */

}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000764 	.word	0x20000764
 800357c:	40013800 	.word	0x40013800

08003580 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003584:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <MX_USART2_UART_Init+0x68>)
 8003586:	4a19      	ldr	r2, [pc, #100]	; (80035ec <MX_USART2_UART_Init+0x6c>)
 8003588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800358a:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <MX_USART2_UART_Init+0x68>)
 800358c:	22e1      	movs	r2, #225	; 0xe1
 800358e:	0252      	lsls	r2, r2, #9
 8003590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <MX_USART2_UART_Init+0x68>)
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <MX_USART2_UART_Init+0x68>)
 800359a:	2200      	movs	r2, #0
 800359c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <MX_USART2_UART_Init+0x68>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035a4:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <MX_USART2_UART_Init+0x68>)
 80035a6:	220c      	movs	r2, #12
 80035a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <MX_USART2_UART_Init+0x68>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <MX_USART2_UART_Init+0x68>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <MX_USART2_UART_Init+0x68>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <MX_USART2_UART_Init+0x68>)
 80035be:	2200      	movs	r2, #0
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80035c2:	4809      	ldr	r0, [pc, #36]	; (80035e8 <MX_USART2_UART_Init+0x68>)
 80035c4:	2300      	movs	r3, #0
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	f7fe fff1 	bl	80025b0 <HAL_RS485Ex_Init>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d001      	beq.n	80035d6 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80035d2:	f000 f905 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <MX_USART2_UART_Init+0x6c>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <MX_USART2_UART_Init+0x6c>)
 80035dc:	2120      	movs	r1, #32
 80035de:	430a      	orrs	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART2_Init 2 */

}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200007ec 	.word	0x200007ec
 80035ec:	40004400 	.word	0x40004400

080035f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <MX_DMA_Init+0x38>)
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <MX_DMA_Init+0x38>)
 80035fc:	2101      	movs	r1, #1
 80035fe:	430a      	orrs	r2, r1
 8003600:	615a      	str	r2, [r3, #20]
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <MX_DMA_Init+0x38>)
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	2201      	movs	r2, #1
 8003608:	4013      	ands	r3, r2
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2100      	movs	r1, #0
 8003612:	2009      	movs	r0, #9
 8003614:	f7fd fbc2 	bl	8000d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003618:	2009      	movs	r0, #9
 800361a:	f7fd fbd4 	bl	8000dc6 <HAL_NVIC_EnableIRQ>

}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b002      	add	sp, #8
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	40021000 	.word	0x40021000

0800362c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b08b      	sub	sp, #44	; 0x2c
 8003630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003632:	2414      	movs	r4, #20
 8003634:	193b      	adds	r3, r7, r4
 8003636:	0018      	movs	r0, r3
 8003638:	2314      	movs	r3, #20
 800363a:	001a      	movs	r2, r3
 800363c:	2100      	movs	r1, #0
 800363e:	f000 fac9 	bl	8003bd4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 8003648:	2180      	movs	r1, #128	; 0x80
 800364a:	0309      	lsls	r1, r1, #12
 800364c:	430a      	orrs	r2, r1
 800364e:	615a      	str	r2, [r3, #20]
 8003650:	4b5f      	ldr	r3, [pc, #380]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	031b      	lsls	r3, r3, #12
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800365e:	4b5c      	ldr	r3, [pc, #368]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	4b5b      	ldr	r3, [pc, #364]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 8003664:	2180      	movs	r1, #128	; 0x80
 8003666:	03c9      	lsls	r1, r1, #15
 8003668:	430a      	orrs	r2, r1
 800366a:	615a      	str	r2, [r3, #20]
 800366c:	4b58      	ldr	r3, [pc, #352]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	03db      	lsls	r3, r3, #15
 8003674:	4013      	ands	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800367a:	4b55      	ldr	r3, [pc, #340]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	4b54      	ldr	r3, [pc, #336]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	0289      	lsls	r1, r1, #10
 8003684:	430a      	orrs	r2, r1
 8003686:	615a      	str	r2, [r3, #20]
 8003688:	4b51      	ldr	r3, [pc, #324]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	029b      	lsls	r3, r3, #10
 8003690:	4013      	ands	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003696:	4b4e      	ldr	r3, [pc, #312]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	4b4d      	ldr	r3, [pc, #308]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	02c9      	lsls	r1, r1, #11
 80036a0:	430a      	orrs	r2, r1
 80036a2:	615a      	str	r2, [r3, #20]
 80036a4:	4b4a      	ldr	r3, [pc, #296]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	02db      	lsls	r3, r3, #11
 80036ac:	4013      	ands	r3, r2
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b2:	4b47      	ldr	r3, [pc, #284]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	4b46      	ldr	r3, [pc, #280]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	0349      	lsls	r1, r1, #13
 80036bc:	430a      	orrs	r2, r1
 80036be:	615a      	str	r2, [r3, #20]
 80036c0:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <MX_GPIO_Init+0x1a4>)
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	035b      	lsls	r3, r3, #13
 80036c8:	4013      	ands	r3, r2
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80036ce:	2380      	movs	r3, #128	; 0x80
 80036d0:	0219      	lsls	r1, r3, #8
 80036d2:	2390      	movs	r3, #144	; 0x90
 80036d4:	05db      	lsls	r3, r3, #23
 80036d6:	2200      	movs	r2, #0
 80036d8:	0018      	movs	r0, r3
 80036da:	f7fd feb6 	bl	800144a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80036de:	23c0      	movs	r3, #192	; 0xc0
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	483c      	ldr	r0, [pc, #240]	; (80037d4 <MX_GPIO_Init+0x1a8>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	0019      	movs	r1, r3
 80036e8:	f7fd feaf 	bl	800144a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	0192      	lsls	r2, r2, #6
 80036f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036f4:	193b      	adds	r3, r7, r4
 80036f6:	2288      	movs	r2, #136	; 0x88
 80036f8:	0352      	lsls	r2, r2, #13
 80036fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	193b      	adds	r3, r7, r4
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003702:	193b      	adds	r3, r7, r4
 8003704:	4a33      	ldr	r2, [pc, #204]	; (80037d4 <MX_GPIO_Init+0x1a8>)
 8003706:	0019      	movs	r1, r3
 8003708:	0010      	movs	r0, r2
 800370a:	f7fd fd11 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800370e:	0021      	movs	r1, r4
 8003710:	193b      	adds	r3, r7, r4
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	0212      	lsls	r2, r2, #8
 8003716:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003718:	000c      	movs	r4, r1
 800371a:	193b      	adds	r3, r7, r4
 800371c:	2201      	movs	r2, #1
 800371e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	193b      	adds	r3, r7, r4
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003726:	193b      	adds	r3, r7, r4
 8003728:	2200      	movs	r2, #0
 800372a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372c:	193a      	adds	r2, r7, r4
 800372e:	2390      	movs	r3, #144	; 0x90
 8003730:	05db      	lsls	r3, r3, #23
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f7fd fcfb 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800373a:	0021      	movs	r1, r4
 800373c:	187b      	adds	r3, r7, r1
 800373e:	22c0      	movs	r2, #192	; 0xc0
 8003740:	0112      	lsls	r2, r2, #4
 8003742:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003744:	000c      	movs	r4, r1
 8003746:	193b      	adds	r3, r7, r4
 8003748:	2201      	movs	r2, #1
 800374a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	193b      	adds	r3, r7, r4
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	193b      	adds	r3, r7, r4
 8003754:	2200      	movs	r2, #0
 8003756:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003758:	193b      	adds	r3, r7, r4
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <MX_GPIO_Init+0x1a8>)
 800375c:	0019      	movs	r1, r3
 800375e:	0010      	movs	r0, r2
 8003760:	f7fd fce6 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003764:	0021      	movs	r1, r4
 8003766:	187b      	adds	r3, r7, r1
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	0152      	lsls	r2, r2, #5
 800376c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800376e:	000c      	movs	r4, r1
 8003770:	193b      	adds	r3, r7, r4
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	193b      	adds	r3, r7, r4
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377c:	193b      	adds	r3, r7, r4
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <MX_GPIO_Init+0x1a8>)
 8003780:	0019      	movs	r1, r3
 8003782:	0010      	movs	r0, r2
 8003784:	f7fd fcd4 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003788:	193b      	adds	r3, r7, r4
 800378a:	2204      	movs	r2, #4
 800378c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800378e:	193b      	adds	r3, r7, r4
 8003790:	2200      	movs	r2, #0
 8003792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	193b      	adds	r3, r7, r4
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800379a:	193b      	adds	r3, r7, r4
 800379c:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <MX_GPIO_Init+0x1ac>)
 800379e:	0019      	movs	r1, r3
 80037a0:	0010      	movs	r0, r2
 80037a2:	f7fd fcc5 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037a6:	0021      	movs	r1, r4
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	2208      	movs	r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2200      	movs	r2, #0
 80037b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	4a07      	ldr	r2, [pc, #28]	; (80037dc <MX_GPIO_Init+0x1b0>)
 80037be:	0019      	movs	r1, r3
 80037c0:	0010      	movs	r0, r2
 80037c2:	f7fd fcb5 	bl	8001130 <HAL_GPIO_Init>

}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b00b      	add	sp, #44	; 0x2c
 80037cc:	bd90      	pop	{r4, r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	40021000 	.word	0x40021000
 80037d4:	48000800 	.word	0x48000800
 80037d8:	48000c00 	.word	0x48000c00
 80037dc:	48000400 	.word	0x48000400

080037e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037e4:	b672      	cpsid	i
}
 80037e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <Error_Handler+0x8>
	...

080037ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_MspInit+0x44>)
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_MspInit+0x44>)
 80037f8:	2101      	movs	r1, #1
 80037fa:	430a      	orrs	r2, r1
 80037fc:	619a      	str	r2, [r3, #24]
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_MspInit+0x44>)
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2201      	movs	r2, #1
 8003804:	4013      	ands	r3, r2
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_MspInit+0x44>)
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <HAL_MspInit+0x44>)
 8003810:	2180      	movs	r1, #128	; 0x80
 8003812:	0549      	lsls	r1, r1, #21
 8003814:	430a      	orrs	r2, r1
 8003816:	61da      	str	r2, [r3, #28]
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_MspInit+0x44>)
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	055b      	lsls	r3, r3, #21
 8003820:	4013      	ands	r3, r2
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b002      	add	sp, #8
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	40021000 	.word	0x40021000

08003834 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b08d      	sub	sp, #52	; 0x34
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	241c      	movs	r4, #28
 800383e:	193b      	adds	r3, r7, r4
 8003840:	0018      	movs	r0, r3
 8003842:	2314      	movs	r3, #20
 8003844:	001a      	movs	r2, r3
 8003846:	2100      	movs	r1, #0
 8003848:	f000 f9c4 	bl	8003bd4 <memset>
  if(hadc->Instance==ADC1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a4a      	ldr	r2, [pc, #296]	; (800397c <HAL_ADC_MspInit+0x148>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d000      	beq.n	8003858 <HAL_ADC_MspInit+0x24>
 8003856:	e08d      	b.n	8003974 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003858:	4b49      	ldr	r3, [pc, #292]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 800385a:	699a      	ldr	r2, [r3, #24]
 800385c:	4b48      	ldr	r3, [pc, #288]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	0089      	lsls	r1, r1, #2
 8003862:	430a      	orrs	r2, r1
 8003864:	619a      	str	r2, [r3, #24]
 8003866:	4b46      	ldr	r3, [pc, #280]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 8003868:	699a      	ldr	r2, [r3, #24]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003874:	4b42      	ldr	r3, [pc, #264]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	4b41      	ldr	r3, [pc, #260]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	0309      	lsls	r1, r1, #12
 800387e:	430a      	orrs	r2, r1
 8003880:	615a      	str	r2, [r3, #20]
 8003882:	4b3f      	ldr	r3, [pc, #252]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	031b      	lsls	r3, r3, #12
 800388a:	4013      	ands	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003890:	4b3b      	ldr	r3, [pc, #236]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	4b3a      	ldr	r3, [pc, #232]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	0289      	lsls	r1, r1, #10
 800389a:	430a      	orrs	r2, r1
 800389c:	615a      	str	r2, [r3, #20]
 800389e:	4b38      	ldr	r3, [pc, #224]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	029b      	lsls	r3, r3, #10
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ac:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	4b33      	ldr	r3, [pc, #204]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	02c9      	lsls	r1, r1, #11
 80038b6:	430a      	orrs	r2, r1
 80038b8:	615a      	str	r2, [r3, #20]
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <HAL_ADC_MspInit+0x14c>)
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	02db      	lsls	r3, r3, #11
 80038c2:	4013      	ands	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 80038c8:	193b      	adds	r3, r7, r4
 80038ca:	2231      	movs	r2, #49	; 0x31
 80038cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ce:	193b      	adds	r3, r7, r4
 80038d0:	2203      	movs	r2, #3
 80038d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	193b      	adds	r3, r7, r4
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038da:	193b      	adds	r3, r7, r4
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <HAL_ADC_MspInit+0x150>)
 80038de:	0019      	movs	r1, r3
 80038e0:	0010      	movs	r0, r2
 80038e2:	f7fd fc25 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038e6:	193b      	adds	r3, r7, r4
 80038e8:	22c0      	movs	r2, #192	; 0xc0
 80038ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ec:	193b      	adds	r3, r7, r4
 80038ee:	2203      	movs	r2, #3
 80038f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f2:	193b      	adds	r3, r7, r4
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f8:	193a      	adds	r2, r7, r4
 80038fa:	2390      	movs	r3, #144	; 0x90
 80038fc:	05db      	lsls	r3, r3, #23
 80038fe:	0011      	movs	r1, r2
 8003900:	0018      	movs	r0, r3
 8003902:	f7fd fc15 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003906:	193b      	adds	r3, r7, r4
 8003908:	2203      	movs	r2, #3
 800390a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800390c:	193b      	adds	r3, r7, r4
 800390e:	2203      	movs	r2, #3
 8003910:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	193b      	adds	r3, r7, r4
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003918:	193b      	adds	r3, r7, r4
 800391a:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <HAL_ADC_MspInit+0x154>)
 800391c:	0019      	movs	r1, r3
 800391e:	0010      	movs	r0, r2
 8003920:	f7fd fc06 	bl	8001130 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_ADC_MspInit+0x158>)
 8003926:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <HAL_ADC_MspInit+0x15c>)
 8003928:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800392a:	4b18      	ldr	r3, [pc, #96]	; (800398c <HAL_ADC_MspInit+0x158>)
 800392c:	2200      	movs	r2, #0
 800392e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_ADC_MspInit+0x158>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_ADC_MspInit+0x158>)
 8003938:	2280      	movs	r2, #128	; 0x80
 800393a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_ADC_MspInit+0x158>)
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	0052      	lsls	r2, r2, #1
 8003942:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_ADC_MspInit+0x158>)
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	00d2      	lsls	r2, r2, #3
 800394a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <HAL_ADC_MspInit+0x158>)
 800394e:	2220      	movs	r2, #32
 8003950:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <HAL_ADC_MspInit+0x158>)
 8003954:	2200      	movs	r2, #0
 8003956:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_ADC_MspInit+0x158>)
 800395a:	0018      	movs	r0, r3
 800395c:	f7fd fa50 	bl	8000e00 <HAL_DMA_Init>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d001      	beq.n	8003968 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003964:	f7ff ff3c 	bl	80037e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a08      	ldr	r2, [pc, #32]	; (800398c <HAL_ADC_MspInit+0x158>)
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <HAL_ADC_MspInit+0x158>)
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b00d      	add	sp, #52	; 0x34
 800397a:	bd90      	pop	{r4, r7, pc}
 800397c:	40012400 	.word	0x40012400
 8003980:	40021000 	.word	0x40021000
 8003984:	48000800 	.word	0x48000800
 8003988:	48000400 	.word	0x48000400
 800398c:	20000720 	.word	0x20000720
 8003990:	40020008 	.word	0x40020008

08003994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b08d      	sub	sp, #52	; 0x34
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	241c      	movs	r4, #28
 800399e:	193b      	adds	r3, r7, r4
 80039a0:	0018      	movs	r0, r3
 80039a2:	2314      	movs	r3, #20
 80039a4:	001a      	movs	r2, r3
 80039a6:	2100      	movs	r1, #0
 80039a8:	f000 f914 	bl	8003bd4 <memset>
  if(huart->Instance==USART1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a41      	ldr	r2, [pc, #260]	; (8003ab8 <HAL_UART_MspInit+0x124>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d13c      	bne.n	8003a30 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039b6:	4b41      	ldr	r3, [pc, #260]	; (8003abc <HAL_UART_MspInit+0x128>)
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	4b40      	ldr	r3, [pc, #256]	; (8003abc <HAL_UART_MspInit+0x128>)
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	01c9      	lsls	r1, r1, #7
 80039c0:	430a      	orrs	r2, r1
 80039c2:	619a      	str	r2, [r3, #24]
 80039c4:	4b3d      	ldr	r3, [pc, #244]	; (8003abc <HAL_UART_MspInit+0x128>)
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	01db      	lsls	r3, r3, #7
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	4b3a      	ldr	r3, [pc, #232]	; (8003abc <HAL_UART_MspInit+0x128>)
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	4b39      	ldr	r3, [pc, #228]	; (8003abc <HAL_UART_MspInit+0x128>)
 80039d8:	2180      	movs	r1, #128	; 0x80
 80039da:	0289      	lsls	r1, r1, #10
 80039dc:	430a      	orrs	r2, r1
 80039de:	615a      	str	r2, [r3, #20]
 80039e0:	4b36      	ldr	r3, [pc, #216]	; (8003abc <HAL_UART_MspInit+0x128>)
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	029b      	lsls	r3, r3, #10
 80039e8:	4013      	ands	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80039ee:	193b      	adds	r3, r7, r4
 80039f0:	22b0      	movs	r2, #176	; 0xb0
 80039f2:	0152      	lsls	r2, r2, #5
 80039f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	0021      	movs	r1, r4
 80039f8:	187b      	adds	r3, r7, r1
 80039fa:	2202      	movs	r2, #2
 80039fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	187b      	adds	r3, r7, r1
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	2203      	movs	r2, #3
 8003a08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a10:	187a      	adds	r2, r7, r1
 8003a12:	2390      	movs	r3, #144	; 0x90
 8003a14:	05db      	lsls	r3, r3, #23
 8003a16:	0011      	movs	r1, r2
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7fd fb89 	bl	8001130 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2100      	movs	r1, #0
 8003a22:	201b      	movs	r0, #27
 8003a24:	f7fd f9ba 	bl	8000d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a28:	201b      	movs	r0, #27
 8003a2a:	f7fd f9cc 	bl	8000dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a2e:	e03f      	b.n	8003ab0 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a22      	ldr	r2, [pc, #136]	; (8003ac0 <HAL_UART_MspInit+0x12c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d13a      	bne.n	8003ab0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <HAL_UART_MspInit+0x128>)
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <HAL_UART_MspInit+0x128>)
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	0289      	lsls	r1, r1, #10
 8003a44:	430a      	orrs	r2, r1
 8003a46:	61da      	str	r2, [r3, #28]
 8003a48:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <HAL_UART_MspInit+0x128>)
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	029b      	lsls	r3, r3, #10
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a56:	4b19      	ldr	r3, [pc, #100]	; (8003abc <HAL_UART_MspInit+0x128>)
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	4b18      	ldr	r3, [pc, #96]	; (8003abc <HAL_UART_MspInit+0x128>)
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	0289      	lsls	r1, r1, #10
 8003a60:	430a      	orrs	r2, r1
 8003a62:	615a      	str	r2, [r3, #20]
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_UART_MspInit+0x128>)
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	029b      	lsls	r3, r3, #10
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003a72:	211c      	movs	r1, #28
 8003a74:	187b      	adds	r3, r7, r1
 8003a76:	220e      	movs	r2, #14
 8003a78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	187b      	adds	r3, r7, r1
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	2203      	movs	r2, #3
 8003a8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003a8c:	187b      	adds	r3, r7, r1
 8003a8e:	2201      	movs	r2, #1
 8003a90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	187a      	adds	r2, r7, r1
 8003a94:	2390      	movs	r3, #144	; 0x90
 8003a96:	05db      	lsls	r3, r3, #23
 8003a98:	0011      	movs	r1, r2
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f7fd fb48 	bl	8001130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	201c      	movs	r0, #28
 8003aa6:	f7fd f979 	bl	8000d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003aaa:	201c      	movs	r0, #28
 8003aac:	f7fd f98b 	bl	8000dc6 <HAL_NVIC_EnableIRQ>
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b00d      	add	sp, #52	; 0x34
 8003ab6:	bd90      	pop	{r4, r7, pc}
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40004400 	.word	0x40004400

08003ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ac8:	e7fe      	b.n	8003ac8 <NMI_Handler+0x4>

08003aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ace:	e7fe      	b.n	8003ace <HardFault_Handler+0x4>

08003ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ae8:	f7fc fbe2 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  MyTimer_Handler();
 8003aec:	f7fe fea8 	bl	8002840 <MyTimer_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003af0:	46c0      	nop			; (mov r8, r8)
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <DMA1_Channel1_IRQHandler+0x14>)
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7fd fa2c 	bl	8000f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	20000720 	.word	0x20000720

08003b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART1_IRQ_Function();
 8003b14:	f7fe ff3c 	bl	8002990 <USART1_IRQ_Function>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2_IRQ_Function();
 8003b22:	f7ff f937 	bl	8002d94 <USART2_IRQ_Function>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif
  /* USER CODE END USART2_IRQn 1 */
}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b38:	480d      	ldr	r0, [pc, #52]	; (8003b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b3c:	f7ff fff6 	bl	8003b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b40:	480c      	ldr	r0, [pc, #48]	; (8003b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b42:	490d      	ldr	r1, [pc, #52]	; (8003b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <LoopForever+0xe>)
  movs r3, #0
 8003b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b48:	e002      	b.n	8003b50 <LoopCopyDataInit>

08003b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b4e:	3304      	adds	r3, #4

08003b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b54:	d3f9      	bcc.n	8003b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b58:	4c0a      	ldr	r4, [pc, #40]	; (8003b84 <LoopForever+0x16>)
  movs r3, #0
 8003b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b5c:	e001      	b.n	8003b62 <LoopFillZerobss>

08003b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b60:	3204      	adds	r2, #4

08003b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b64:	d3fb      	bcc.n	8003b5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b66:	f000 f811 	bl	8003b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b6a:	f7ff fb93 	bl	8003294 <main>

08003b6e <LoopForever>:

LoopForever:
    b LoopForever
 8003b6e:	e7fe      	b.n	8003b6e <LoopForever>
  ldr   r0, =_estack
 8003b70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003b7c:	08003e3c 	.word	0x08003e3c
  ldr r2, =_sbss
 8003b80:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003b84:	20000884 	.word	0x20000884

08003b88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b88:	e7fe      	b.n	8003b88 <ADC1_IRQHandler>
	...

08003b8c <__libc_init_array>:
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	2600      	movs	r6, #0
 8003b90:	4d0c      	ldr	r5, [pc, #48]	; (8003bc4 <__libc_init_array+0x38>)
 8003b92:	4c0d      	ldr	r4, [pc, #52]	; (8003bc8 <__libc_init_array+0x3c>)
 8003b94:	1b64      	subs	r4, r4, r5
 8003b96:	10a4      	asrs	r4, r4, #2
 8003b98:	42a6      	cmp	r6, r4
 8003b9a:	d109      	bne.n	8003bb0 <__libc_init_array+0x24>
 8003b9c:	2600      	movs	r6, #0
 8003b9e:	f000 f821 	bl	8003be4 <_init>
 8003ba2:	4d0a      	ldr	r5, [pc, #40]	; (8003bcc <__libc_init_array+0x40>)
 8003ba4:	4c0a      	ldr	r4, [pc, #40]	; (8003bd0 <__libc_init_array+0x44>)
 8003ba6:	1b64      	subs	r4, r4, r5
 8003ba8:	10a4      	asrs	r4, r4, #2
 8003baa:	42a6      	cmp	r6, r4
 8003bac:	d105      	bne.n	8003bba <__libc_init_array+0x2e>
 8003bae:	bd70      	pop	{r4, r5, r6, pc}
 8003bb0:	00b3      	lsls	r3, r6, #2
 8003bb2:	58eb      	ldr	r3, [r5, r3]
 8003bb4:	4798      	blx	r3
 8003bb6:	3601      	adds	r6, #1
 8003bb8:	e7ee      	b.n	8003b98 <__libc_init_array+0xc>
 8003bba:	00b3      	lsls	r3, r6, #2
 8003bbc:	58eb      	ldr	r3, [r5, r3]
 8003bbe:	4798      	blx	r3
 8003bc0:	3601      	adds	r6, #1
 8003bc2:	e7f2      	b.n	8003baa <__libc_init_array+0x1e>
 8003bc4:	08003e34 	.word	0x08003e34
 8003bc8:	08003e34 	.word	0x08003e34
 8003bcc:	08003e34 	.word	0x08003e34
 8003bd0:	08003e38 	.word	0x08003e38

08003bd4 <memset>:
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	1882      	adds	r2, r0, r2
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d100      	bne.n	8003bde <memset+0xa>
 8003bdc:	4770      	bx	lr
 8003bde:	7019      	strb	r1, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	e7f9      	b.n	8003bd8 <memset+0x4>

08003be4 <_init>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bea:	bc08      	pop	{r3}
 8003bec:	469e      	mov	lr, r3
 8003bee:	4770      	bx	lr

08003bf0 <_fini>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr
